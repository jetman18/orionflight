
mario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004658  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000010  080047a0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080047a0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b52  00000000  00000000  00031adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00034630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00035858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018322  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015017  00000000  00000000  0004eca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e790  00000000  00000000  00063cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e04  00000000  00000000  000f249c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800474c 	.word	0x0800474c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800474c 	.word	0x0800474c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0xcc>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a2c      	ldr	r2, [pc, #176]	; (800084c <MX_GPIO_Init+0xcc>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_GPIO_Init+0xcc>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_GPIO_Init+0xcc>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a26      	ldr	r2, [pc, #152]	; (800084c <MX_GPIO_Init+0xcc>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_GPIO_Init+0xcc>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_GPIO_Init+0xcc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_GPIO_Init+0xcc>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_GPIO_Init+0xcc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_GPIO_Init+0xcc>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <MX_GPIO_Init+0xcc>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_GPIO_Init+0xcc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007fc:	f001 f9a2 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2110      	movs	r1, #16
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_GPIO_Init+0xd4>)
 8000806:	f001 f99d 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0xd0>)
 8000824:	f001 f80a 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000828:	2310      	movs	r3, #16
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fffc 	bl	800183c <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	40011000 	.word	0x40011000
 8000854:	40010800 	.word	0x40010800

08000858 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C2_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C2_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000896:	f001 f96d 	bl	8001b74 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f8a0 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000002c 	.word	0x2000002c
 80008ac:	40005800 	.word	0x40005800
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <HAL_I2C_MspInit+0x74>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d124      	bne.n	800091e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_I2C_MspInit+0x78>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_I2C_MspInit+0x78>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_I2C_MspInit+0x78>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f2:	2312      	movs	r3, #18
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <HAL_I2C_MspInit+0x7c>)
 8000902:	f000 ff9b 	bl	800183c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_I2C_MspInit+0x78>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_I2C_MspInit+0x78>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_I2C_MspInit+0x78>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40005800 	.word	0x40005800
 800092c:	40021000 	.word	0x40021000
 8000930:	40010c00 	.word	0x40010c00

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fe10 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f80d 	bl	800095a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff ff1e 	bl	8000780 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000944:	f7ff ff88 	bl	8000858 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000948:	f000 f9b0 	bl	8000cac <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800094c:	f000 f93a 	bl	8000bc4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000950:	f000 f84e 	bl	80009f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
    main_loop();// inti loop
 8000954:	f000 fa9a 	bl	8000e8c <main_loop>
    // ptotototot
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x24>

0800095a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b090      	sub	sp, #64	; 0x40
 800095e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	2228      	movs	r2, #40	; 0x28
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fee7 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000998:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800099c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd32 	bl	800340c <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009ae:	f000 f819 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 ff9f 	bl	8003910 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009d8:	f000 f804 	bl	80009e4 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3740      	adds	r7, #64	; 0x40
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_SPI1_Init+0x64>)
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <MX_SPI1_Init+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_SPI1_Init+0x64>)
 80009fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a24:	2208      	movs	r2, #8
 8000a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a42:	f003 f8fd 	bl	8003c40 <HAL_SPI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a4c:	f7ff ffca 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000080 	.word	0x20000080
 8000a58:	40013000 	.word	0x40013000

08000a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d12f      	bne.n	8000adc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_SPI_MspInit+0x90>)
 8000ac0:	f000 febc 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_SPI_MspInit+0x90>)
 8000ad8:	f000 feb0 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <HAL_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_MspInit+0x60>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_MspInit+0x60>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 fd25 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM4_IRQHandler+0x10>)
 8000baa:	f003 f96f 	bl	8003e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d8 	.word	0x200000d8

08000bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <MX_TIM4_Init+0x98>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000be8:	2247      	movs	r2, #71	; 0x47
 8000bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000c08:	f003 f89e 	bl	8003d48 <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c12:	f7ff fee7 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000c24:	f003 fa3a 	bl	800409c <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f7ff fed9 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_TIM4_Init+0x94>)
 8000c40:	f003 fc0c 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c4a:	f7ff fecb 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000d8 	.word	0x200000d8
 8000c5c:	40000800 	.word	0x40000800

08000c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d113      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	201e      	movs	r0, #30
 8000c90:	f000 fd9d 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c94:	201e      	movs	r0, #30
 8000c96:	f000 fdb6 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40000800 	.word	0x40000800
 8000ca8:	40021000 	.word	0x40021000

08000cac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_USART1_UART_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f003 fc2a 	bl	800453c <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cee:	f7ff fe79 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	40013800 	.word	0x40013800

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d131      	bne.n	8000d84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4619      	mov	r1, r3
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <HAL_UART_MspInit+0x94>)
 8000d66:	f000 fd69 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_UART_MspInit+0x94>)
 8000d80:	f000 fd5c 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010800 	.word	0x40010800

08000d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dbe:	f7ff fefb 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fc97 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc6:	f7ff fdb5 	bl	8000934 <main>
  bx lr
 8000dca:	4770      	bx	lr
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd4:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000dd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ddc:	200001b0 	.word	0x200001b0

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>
	...

08000de4 <loopFequency>:
static uint64_t time1,time2;
/*
 * tao vong lap voi chu ki hz
 */
void loopFequency(uint16_t hz)
{
 8000de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
    do{
   	 time2=micros();
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <loopFequency+0x94>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	2200      	movs	r2, #0
 8000df8:	469a      	mov	sl, r3
 8000dfa:	4693      	mov	fp, r2
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <loopFequency+0x98>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	eb1a 0102 	adds.w	r1, sl, r2
 8000e06:	6039      	str	r1, [r7, #0]
 8000e08:	eb4b 0303 	adc.w	r3, fp, r3
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <loopFequency+0x9c>)
 8000e10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000e14:	e9c3 1200 	strd	r1, r2, [r3]
     }while((time2-time1)<HZ_TO_MICRO(hz));
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <loopFequency+0x9c>)
 8000e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <loopFequency+0xa0>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	1a84      	subs	r4, r0, r2
 8000e26:	eb61 0503 	sbc.w	r5, r1, r3
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fa47 	bl	80002c0 <__aeabi_i2f>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000e3a:	f7ff fb49 	bl	80004d0 <__aeabi_fdiv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <loopFequency+0xa4>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fa90 	bl	8000368 <__aeabi_fmul>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc78 	bl	8000740 <__aeabi_f2uiz>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2200      	movs	r2, #0
 8000e54:	4698      	mov	r8, r3
 8000e56:	4691      	mov	r9, r2
 8000e58:	4544      	cmp	r4, r8
 8000e5a:	eb75 0309 	sbcs.w	r3, r5, r9
 8000e5e:	d3c7      	bcc.n	8000df0 <loopFequency+0xc>
    time1=time2;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <loopFequency+0x9c>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	4907      	ldr	r1, [pc, #28]	; (8000e84 <loopFequency+0xa0>)
 8000e68:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e76:	bf00      	nop
 8000e78:	200000d8 	.word	0x200000d8
 8000e7c:	20000168 	.word	0x20000168
 8000e80:	20000178 	.word	0x20000178
 8000e84:	20000170 	.word	0x20000170
 8000e88:	49742400 	.word	0x49742400

08000e8c <main_loop>:
#include "timeclock.h"

uint8_t k,l;
MAG_t t;
IMU_raw_t data;
void main_loop(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	// int main
	HAL_TIM_Base_Start_IT(&htim4);
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <main_loop+0x70>)
 8000e94:	f002 ffa8 	bl	8003de8 <HAL_TIM_Base_Start_IT>
	MPU_init();
 8000e98:	f000 fa02 	bl	80012a0 <MPU_init>
	qmc5883_init();
 8000e9c:	f000 fa2e 	bl	80012fc <qmc5883_init>

	    for(int i=1; i<128; i++)
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	e019      	b.n	8000eda <main_loop+0x4e>
	    {
	        int ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	b299      	uxth	r1, r3
 8000eae:	2305      	movs	r3, #5
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <main_loop+0x74>)
 8000eb4:	f001 fd68 	bl	8002988 <HAL_I2C_IsDeviceReady>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	603b      	str	r3, [r7, #0]

	        if(ret == HAL_OK)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d104      	bne.n	8000ecc <main_loop+0x40>
	        {
               k=i;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <main_loop+0x78>)
 8000ec8:	701a      	strb	r2, [r3, #0]
               break;
 8000eca:	e009      	b.n	8000ee0 <main_loop+0x54>
	        }
	        l=i;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <main_loop+0x7c>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	    for(int i=1; i<128; i++)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ede:	dde2      	ble.n	8000ea6 <main_loop+0x1a>
	    }
while(1){

    MPU_get_acc(&data);
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <main_loop+0x80>)
 8000ee2:	f000 f9a3 	bl	800122c <MPU_get_acc>
 //   MPU_get_gyro(&data);
    qmc_get_values(&t,0,0);
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	f04f 0100 	mov.w	r1, #0
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <main_loop+0x84>)
 8000ef0:	f000 fa26 	bl	8001340 <qmc_get_values>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    loopFequency(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ff75 	bl	8000de4 <loopFequency>
while(1){
 8000efa:	e7f1      	b.n	8000ee0 <main_loop+0x54>
 8000efc:	200000d8 	.word	0x200000d8
 8000f00:	2000002c 	.word	0x2000002c
 8000f04:	20000180 	.word	0x20000180
 8000f08:	20000181 	.word	0x20000181
 8000f0c:	20000190 	.word	0x20000190
 8000f10:	20000184 	.word	0x20000184

08000f14 <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f14:	b4b0      	push	{r4, r5, r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d10a      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		callBack();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f2e:	1854      	adds	r4, r2, r1
 8000f30:	f143 0500 	adc.w	r5, r3, #0
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f36:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bcb0      	pop	{r4, r5, r7}
 8000f42:	4770      	bx	lr
 8000f44:	200000d8 	.word	0x200000d8
 8000f48:	20000168 	.word	0x20000168

08000f4c <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fbcd 	bl	80006f4 <__aeabi_f2iz>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f113 0f20 	cmn.w	r3, #32
 8000f64:	db02      	blt.n	8000f6c <sin_approx+0x20>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	dd08      	ble.n	8000f7e <sin_approx+0x32>
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e074      	b.n	800105c <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8000f72:	493c      	ldr	r1, [pc, #240]	; (8001064 <sin_approx+0x118>)
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff f8ed 	bl	8000154 <__aeabi_fsub>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	493a      	ldr	r1, [pc, #232]	; (8001068 <sin_approx+0x11c>)
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fbad 	bl	80006e0 <__aeabi_fcmpgt>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f2      	bne.n	8000f72 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8000f8c:	e005      	b.n	8000f9a <sin_approx+0x4e>
 8000f8e:	4935      	ldr	r1, [pc, #212]	; (8001064 <sin_approx+0x118>)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f8e1 	bl	8000158 <__addsf3>
 8000f96:	4603      	mov	r3, r0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4934      	ldr	r1, [pc, #208]	; (800106c <sin_approx+0x120>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fb81 	bl	80006a4 <__aeabi_fcmplt>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f2      	bne.n	8000f8e <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8000fa8:	4931      	ldr	r1, [pc, #196]	; (8001070 <sin_approx+0x124>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fb98 	bl	80006e0 <__aeabi_fcmpgt>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <sin_approx+0x82>
 8000fb6:	492e      	ldr	r1, [pc, #184]	; (8001070 <sin_approx+0x124>)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff f8cb 	bl	8000154 <__aeabi_fsub>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	482b      	ldr	r0, [pc, #172]	; (8001070 <sin_approx+0x124>)
 8000fc4:	f7ff f8c6 	bl	8000154 <__aeabi_fsub>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e011      	b.n	8000ff2 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8000fce:	4929      	ldr	r1, [pc, #164]	; (8001074 <sin_approx+0x128>)
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fb67 	bl	80006a4 <__aeabi_fcmplt>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <sin_approx+0xa6>
 8000fdc:	4924      	ldr	r1, [pc, #144]	; (8001070 <sin_approx+0x124>)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f8ba 	bl	8000158 <__addsf3>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4822      	ldr	r0, [pc, #136]	; (8001074 <sin_approx+0x128>)
 8000fea:	f7ff f8b3 	bl	8000154 <__aeabi_fsub>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f9b7 	bl	8000368 <__aeabi_fmul>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff f9b1 	bl	8000368 <__aeabi_fmul>
 8001006:	4603      	mov	r3, r0
 8001008:	461c      	mov	r4, r3
 800100a:	f04f 0100 	mov.w	r1, #0
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f7ff f9aa 	bl	8000368 <__aeabi_fmul>
 8001014:	4603      	mov	r3, r0
 8001016:	4918      	ldr	r1, [pc, #96]	; (8001078 <sin_approx+0x12c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f89b 	bl	8000154 <__aeabi_fsub>
 800101e:	4603      	mov	r3, r0
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f9a0 	bl	8000368 <__aeabi_fmul>
 8001028:	4603      	mov	r3, r0
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <sin_approx+0x130>)
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f893 	bl	8000158 <__addsf3>
 8001032:	4603      	mov	r3, r0
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f996 	bl	8000368 <__aeabi_fmul>
 800103c:	4603      	mov	r3, r0
 800103e:	4910      	ldr	r1, [pc, #64]	; (8001080 <sin_approx+0x134>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f887 	bl	8000154 <__aeabi_fsub>
 8001046:	4603      	mov	r3, r0
 8001048:	4619      	mov	r1, r3
 800104a:	4620      	mov	r0, r4
 800104c:	f7ff f98c 	bl	8000368 <__aeabi_fmul>
 8001050:	4603      	mov	r3, r0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f87f 	bl	8000158 <__addsf3>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40c90fdb 	.word	0x40c90fdb
 8001068:	40490fdb 	.word	0x40490fdb
 800106c:	c0490fdb 	.word	0xc0490fdb
 8001070:	3fc90fdb 	.word	0x3fc90fdb
 8001074:	bfc90fdb 	.word	0xbfc90fdb
 8001078:	3941e792 	.word	0x3941e792
 800107c:	3c083097 	.word	0x3c083097
 8001080:	3e2aa815 	.word	0x3e2aa815

08001084 <cos_approx>:

float cos_approx(float x)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <cos_approx+0x24>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f862 	bl	8000158 <__addsf3>
 8001094:	4603      	mov	r3, r0
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff58 	bl	8000f4c <sin_approx>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	3fc90fdb 	.word	0x3fc90fdb

080010ac <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010bc:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	69b8      	ldr	r0, [r7, #24]
 80010d2:	f7ff fb05 	bl	80006e0 <__aeabi_fcmpgt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <atan2_approx+0x34>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	e000      	b.n	80010e2 <atan2_approx+0x36>
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 80010e4:	f04f 0100 	mov.w	r1, #0
 80010e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ea:	f7ff fad1 	bl	8000690 <__aeabi_fcmpeq>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d114      	bne.n	800111e <atan2_approx+0x72>
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	6938      	ldr	r0, [r7, #16]
 8001100:	f7ff fad0 	bl	80006a4 <__aeabi_fcmplt>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <atan2_approx+0x62>
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	e000      	b.n	8001110 <atan2_approx+0x64>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f9dc 	bl	80004d0 <__aeabi_fdiv>
 8001118:	4603      	mov	r3, r0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	e002      	b.n	8001124 <atan2_approx+0x78>
    else res = 0.0f;
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001124:	4938      	ldr	r1, [pc, #224]	; (8001208 <atan2_approx+0x15c>)
 8001126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001128:	f7ff f91e 	bl	8000368 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	4937      	ldr	r1, [pc, #220]	; (800120c <atan2_approx+0x160>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f80f 	bl	8000154 <__aeabi_fsub>
 8001136:	4603      	mov	r3, r0
 8001138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f914 	bl	8000368 <__aeabi_fmul>
 8001140:	4603      	mov	r3, r0
 8001142:	4933      	ldr	r1, [pc, #204]	; (8001210 <atan2_approx+0x164>)
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f805 	bl	8000154 <__aeabi_fsub>
 800114a:	4603      	mov	r3, r0
 800114c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f90a 	bl	8000368 <__aeabi_fmul>
 8001154:	4603      	mov	r3, r0
 8001156:	492f      	ldr	r1, [pc, #188]	; (8001214 <atan2_approx+0x168>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7fe fffb 	bl	8000154 <__aeabi_fsub>
 800115e:	4603      	mov	r3, r0
 8001160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f900 	bl	8000368 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	492b      	ldr	r1, [pc, #172]	; (8001218 <atan2_approx+0x16c>)
 800116c:	4618      	mov	r0, r3
 800116e:	f7fe fff1 	bl	8000154 <__aeabi_fsub>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001178:	4928      	ldr	r1, [pc, #160]	; (800121c <atan2_approx+0x170>)
 800117a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800117c:	f7ff f8f4 	bl	8000368 <__aeabi_fmul>
 8001180:	4603      	mov	r3, r0
 8001182:	4927      	ldr	r1, [pc, #156]	; (8001220 <atan2_approx+0x174>)
 8001184:	4618      	mov	r0, r3
 8001186:	f7fe ffe7 	bl	8000158 <__addsf3>
 800118a:	4603      	mov	r3, r0
 800118c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f8ea 	bl	8000368 <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800119a:	4618      	mov	r0, r3
 800119c:	f7fe ffdc 	bl	8000158 <__addsf3>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff f993 	bl	80004d0 <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80011ae:	6a39      	ldr	r1, [r7, #32]
 80011b0:	69f8      	ldr	r0, [r7, #28]
 80011b2:	f7ff fa95 	bl	80006e0 <__aeabi_fcmpgt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <atan2_approx+0x11c>
 80011bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <atan2_approx+0x178>)
 80011c0:	f7fe ffc8 	bl	8000154 <__aeabi_fsub>
 80011c4:	4603      	mov	r3, r0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 80011c8:	f04f 0100 	mov.w	r1, #0
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa69 	bl	80006a4 <__aeabi_fcmplt>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <atan2_approx+0x138>
 80011d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <atan2_approx+0x17c>)
 80011dc:	f7fe ffba 	bl	8000154 <__aeabi_fsub>
 80011e0:	4603      	mov	r3, r0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 80011e4:	f04f 0100 	mov.w	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fa5b 	bl	80006a4 <__aeabi_fcmplt>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <atan2_approx+0x150>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    return res;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011fe:	4618      	mov	r0, r3
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	3d4e0939 	.word	0x3d4e0939
 800120c:	3e9eb5e3 	.word	0x3e9eb5e3
 8001210:	3e16fa88 	.word	0x3e16fa88
 8001214:	3f7ffe45 	.word	0x3f7ffe45
 8001218:	34a8dfa7 	.word	0x34a8dfa7
 800121c:	3f24fb99 	.word	0x3f24fb99
 8001220:	3e16a269 	.word	0x3e16a269
 8001224:	3fc90fdb 	.word	0x3fc90fdb
 8001228:	40490fdb 	.word	0x40490fdb

0800122c <MPU_get_acc>:
	}

/**
 *  get acc raw value
 */
void MPU_get_acc(IMU_raw_t *k){
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af02      	add	r7, sp, #8
 8001232:	6078      	str	r0, [r7, #4]
#ifdef MPU_VIA_I2C
	uint8_t buffe[6];
	  buffe[0] = 0x3b;// acc address
 8001234:	233b      	movs	r3, #59	; 0x3b
 8001236:	723b      	strb	r3, [r7, #8]
	  HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffe,1,1);
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	2301      	movs	r3, #1
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	21d0      	movs	r1, #208	; 0xd0
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <MPU_get_acc+0x70>)
 8001246:	f000 fdd9 	bl	8001dfc <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(I2C_PORT,0x68<<1,buffe,6,1);
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	2301      	movs	r3, #1
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2306      	movs	r3, #6
 8001254:	21d0      	movs	r1, #208	; 0xd0
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <MPU_get_acc+0x70>)
 8001258:	f000 fece 	bl	8001ff8 <HAL_I2C_Master_Receive>

	  k->accx=(int16_t)(buffe[0]<<8)|buffe[1];
 800125c:	7a3b      	ldrb	r3, [r7, #8]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7a7b      	ldrb	r3, [r7, #9]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	801a      	strh	r2, [r3, #0]
	  k->accy=(int16_t)(buffe[2]<<8)|buffe[3];
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	805a      	strh	r2, [r3, #2]
	  k->accz=(int16_t)(buffe[4]<<8)|buffe[5];
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	809a      	strh	r2, [r3, #4]
	  k->accx=(int16_t)buffe[0]<<8|buffe[1];
	  k->accy=(int16_t)buffe[2]<<8|buffe[3];
	  k->accz=(int16_t)buffe[4]<<8|buffe[5];
#endif

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000002c 	.word	0x2000002c

080012a0 <MPU_init>:
	  acc_roll_offset  /=(float)k1;
}



void MPU_init(){  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af02      	add	r7, sp, #8
#ifdef MPU_VIA_I2C
    uint8_t buffer[6];

    buffer[0] = 0x6B;
 80012a6:	236b      	movs	r3, #107	; 0x6b
 80012a8:	703b      	strb	r3, [r7, #0]
	buffer[1] = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffer,2,1);
 80012ae:	463a      	mov	r2, r7
 80012b0:	2301      	movs	r3, #1
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2302      	movs	r3, #2
 80012b6:	21d0      	movs	r1, #208	; 0xd0
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MPU_init+0x58>)
 80012ba:	f000 fd9f 	bl	8001dfc <HAL_I2C_Master_Transmit>
	// Configure gyro(500dps full scale)
	buffer[0] = 0x1B;
 80012be:	231b      	movs	r3, #27
 80012c0:	703b      	strb	r3, [r7, #0]
	buffer[1] = 0x08;
 80012c2:	2308      	movs	r3, #8
 80012c4:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffer,2,1);
 80012c6:	463a      	mov	r2, r7
 80012c8:	2301      	movs	r3, #1
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2302      	movs	r3, #2
 80012ce:	21d0      	movs	r1, #208	; 0xd0
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MPU_init+0x58>)
 80012d2:	f000 fd93 	bl	8001dfc <HAL_I2C_Master_Transmit>
	// Configure accelerometer(+/- 8g)
	buffer[0] = 0x1C;
 80012d6:	231c      	movs	r3, #28
 80012d8:	703b      	strb	r3, [r7, #0]
	buffer[1] = 0x18;
 80012da:	2318      	movs	r3, #24
 80012dc:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffer,2,1);
 80012de:	463a      	mov	r2, r7
 80012e0:	2301      	movs	r3, #1
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2302      	movs	r3, #2
 80012e6:	21d0      	movs	r1, #208	; 0xd0
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MPU_init+0x58>)
 80012ea:	f000 fd87 	bl	8001dfc <HAL_I2C_Master_Transmit>


#endif
	//get_offset();
	// Finish setup MPU-6050 register
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000002c 	.word	0x2000002c

080012fc <qmc5883_init>:

/**
 *@qmc5883l
 *@
 */
void qmc5883_init(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
    uint8_t buf[2];
    buf[0]=0x0b;
 8001302:	230b      	movs	r3, #11
 8001304:	713b      	strb	r3, [r7, #4]
    buf[1]=0X01;
 8001306:	2301      	movs	r3, #1
 8001308:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(I2C_PORT,QMC_ADDR,buf,2, 1);
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	2301      	movs	r3, #1
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2302      	movs	r3, #2
 8001312:	211a      	movs	r1, #26
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <qmc5883_init+0x40>)
 8001316:	f000 fd71 	bl	8001dfc <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 800131a:	2309      	movs	r3, #9
 800131c:	713b      	strb	r3, [r7, #4]
    buf[1]=0X1D;
 800131e:	231d      	movs	r3, #29
 8001320:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(I2C_PORT,QMC_ADDR,buf,2, 1);
 8001322:	1d3a      	adds	r2, r7, #4
 8001324:	2301      	movs	r3, #1
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2302      	movs	r3, #2
 800132a:	211a      	movs	r1, #26
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <qmc5883_init+0x40>)
 800132e:	f000 fd65 	bl	8001dfc <HAL_I2C_Master_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000002c 	.word	0x2000002c

08001340 <qmc_get_values>:
void qmc_get_values(MAG_t *t,float pitch,float roll){
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b08b      	sub	sp, #44	; 0x2c
 8001344:	af04      	add	r7, sp, #16
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	  uint8_t datas;
	  static float mx,my;
	  static uint8_t buf[6];
	  HAL_I2C_Mem_Read(I2C_PORT, 0x1A, 0x06, 1,&datas, 1, 1);
 800134c:	2301      	movs	r3, #1
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 0317 	add.w	r3, r7, #23
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	2206      	movs	r2, #6
 800135e:	211a      	movs	r1, #26
 8001360:	4877      	ldr	r0, [pc, #476]	; (8001540 <qmc_get_values+0x200>)
 8001362:	f001 f8a9 	bl	80024b8 <HAL_I2C_Mem_Read>
	  if((datas && 0x01)==0x01){
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80e5 	beq.w	8001538 <qmc_get_values+0x1f8>
			HAL_I2C_Mem_Read(I2C_PORT,QMC_ADDR,0x00,1,buf,6,1);
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2306      	movs	r3, #6
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	4b73      	ldr	r3, [pc, #460]	; (8001544 <qmc_get_values+0x204>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2200      	movs	r2, #0
 800137e:	211a      	movs	r1, #26
 8001380:	486f      	ldr	r0, [pc, #444]	; (8001540 <qmc_get_values+0x200>)
 8001382:	f001 f899 	bl	80024b8 <HAL_I2C_Mem_Read>
			t->mx=(int16_t)buf[1]<<8|(int16_t)buf[0];
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <qmc_get_values+0x204>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <qmc_get_values+0x204>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	801a      	strh	r2, [r3, #0]
			t->my=(int16_t)buf[3]<<8|(int16_t)buf[2];
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <qmc_get_values+0x204>)
 800139e:	78db      	ldrb	r3, [r3, #3]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b67      	ldr	r3, [pc, #412]	; (8001544 <qmc_get_values+0x204>)
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	805a      	strh	r2, [r3, #2]
			t->mz=(int16_t)buf[5]<<8|(int16_t)buf[4];
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <qmc_get_values+0x204>)
 80013b4:	795b      	ldrb	r3, [r3, #5]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <qmc_get_values+0x204>)
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	809a      	strh	r2, [r3, #4]
            mx = t->mx*cos_approx(-pitch) + t->my*sin_approx(-pitch)*sin_approx(roll) + t->mz*sin_approx(-pitch)*cos_approx(-roll);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff76 	bl	80002c0 <__aeabi_i2f>
 80013d4:	4604      	mov	r4, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe51 	bl	8001084 <cos_approx>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7fe ffbe 	bl	8000368 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461d      	mov	r5, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff62 	bl	80002c0 <__aeabi_i2f>
 80013fc:	4604      	mov	r4, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fda1 	bl	8000f4c <sin_approx>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	4620      	mov	r0, r4
 8001410:	f7fe ffaa 	bl	8000368 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	461c      	mov	r4, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fd97 	bl	8000f4c <sin_approx>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	4620      	mov	r0, r4
 8001424:	f7fe ffa0 	bl	8000368 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4628      	mov	r0, r5
 800142e:	f7fe fe93 	bl	8000158 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461d      	mov	r5, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff3f 	bl	80002c0 <__aeabi_i2f>
 8001442:	4604      	mov	r4, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd7e 	bl	8000f4c <sin_approx>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	4620      	mov	r0, r4
 8001456:	f7fe ff87 	bl	8000368 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	461c      	mov	r4, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe0d 	bl	8001084 <cos_approx>
 800146a:	4603      	mov	r3, r0
 800146c:	4619      	mov	r1, r3
 800146e:	4620      	mov	r0, r4
 8001470:	f7fe ff7a 	bl	8000368 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4628      	mov	r0, r5
 800147a:	f7fe fe6d 	bl	8000158 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <qmc_get_values+0x208>)
 8001484:	601a      	str	r2, [r3, #0]
	        my = t->my*(cos_approx(-roll) - t->mz*sin_approx(-roll));
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ff17 	bl	80002c0 <__aeabi_i2f>
 8001492:	4604      	mov	r4, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fdf2 	bl	8001084 <cos_approx>
 80014a0:	4605      	mov	r5, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ff09 	bl	80002c0 <__aeabi_i2f>
 80014ae:	4606      	mov	r6, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd48 	bl	8000f4c <sin_approx>
 80014bc:	4603      	mov	r3, r0
 80014be:	4619      	mov	r1, r3
 80014c0:	4630      	mov	r0, r6
 80014c2:	f7fe ff51 	bl	8000368 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7fe fe42 	bl	8000154 <__aeabi_fsub>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7fe ff47 	bl	8000368 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <qmc_get_values+0x20c>)
 80014e0:	601a      	str	r2, [r3, #0]

	        t->compas=atan2_approx(my,mx)*180.0f/3.1415f;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <qmc_get_values+0x20c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <qmc_get_values+0x208>)
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fddd 	bl	80010ac <atan2_approx>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4916      	ldr	r1, [pc, #88]	; (8001550 <qmc_get_values+0x210>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ff36 	bl	8000368 <__aeabi_fmul>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4915      	ldr	r1, [pc, #84]	; (8001554 <qmc_get_values+0x214>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ffe5 	bl	80004d0 <__aeabi_fdiv>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	609a      	str	r2, [r3, #8]
			if(t->compas<0)t->compas=360.0f + t->compas;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f8c4 	bl	80006a4 <__aeabi_fcmplt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d100      	bne.n	8001524 <qmc_get_values+0x1e4>
		  }
}
 8001522:	e009      	b.n	8001538 <qmc_get_values+0x1f8>
			if(t->compas<0)t->compas=360.0f + t->compas;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	490b      	ldr	r1, [pc, #44]	; (8001558 <qmc_get_values+0x218>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe14 	bl	8000158 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	609a      	str	r2, [r3, #8]
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001540:	2000002c 	.word	0x2000002c
 8001544:	2000019c 	.word	0x2000019c
 8001548:	200001a4 	.word	0x200001a4
 800154c:	200001a8 	.word	0x200001a8
 8001550:	43340000 	.word	0x43340000
 8001554:	40490e56 	.word	0x40490e56
 8001558:	43b40000 	.word	0x43b40000

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f923 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff faba 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f903 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000008 	.word	0x20000008
 8001608:	200001ac 	.word	0x200001ac

0800160c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	200001ac 	.word	0x200001ac

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <__NVIC_EnableIRQ+0x34>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff90 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff2d 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff42 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff35 	bl	8001684 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	492c      	ldr	r1, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e12b      	b.n	8001dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe fe8a 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd8:	f001 ffec 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8001bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d807      	bhi.n	8001bf8 <HAL_I2C_Init+0x84>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a80      	ldr	r2, [pc, #512]	; (8001dec <HAL_I2C_Init+0x278>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bf94      	ite	ls
 8001bf0:	2301      	movls	r3, #1
 8001bf2:	2300      	movhi	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	e006      	b.n	8001c06 <HAL_I2C_Init+0x92>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a7d      	ldr	r2, [pc, #500]	; (8001df0 <HAL_I2C_Init+0x27c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0e7      	b.n	8001dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a78      	ldr	r2, [pc, #480]	; (8001df4 <HAL_I2C_Init+0x280>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d802      	bhi.n	8001c48 <HAL_I2C_Init+0xd4>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	e009      	b.n	8001c5c <HAL_I2C_Init+0xe8>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <HAL_I2C_Init+0x284>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	495c      	ldr	r1, [pc, #368]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d819      	bhi.n	8001cb0 <HAL_I2C_Init+0x13c>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e59      	subs	r1, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c8a:	1c59      	adds	r1, r3, #1
 8001c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c90:	400b      	ands	r3, r1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_I2C_Init+0x138>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1e59      	subs	r1, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	e051      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e04f      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <HAL_I2C_Init+0x168>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e012      	b.n	8001d02 <HAL_I2C_Init+0x18e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Init+0x196>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e022      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <HAL_I2C_Init+0x1bc>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e58      	subs	r0, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	440b      	add	r3, r1
 8001d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	e00f      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	6809      	ldr	r1, [r1, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6911      	ldr	r1, [r2, #16]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68d2      	ldr	r2, [r2, #12]
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	000186a0 	.word	0x000186a0
 8001dec:	001e847f 	.word	0x001e847f
 8001df0:	003d08ff 	.word	0x003d08ff
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	10624dd3 	.word	0x10624dd3

08001dfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	461a      	mov	r2, r3
 8001e08:	460b      	mov	r3, r1
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff fbfc 	bl	800160c <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	f040 80e0 	bne.w	8001fe4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2319      	movs	r3, #25
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4970      	ldr	r1, [pc, #448]	; (8001ff0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f001 f910 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0d3      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_I2C_Master_Transmit+0x50>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0cc      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d007      	beq.n	8001e72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2221      	movs	r2, #33	; 0x21
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	893a      	ldrh	r2, [r7, #8]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001eb4:	8979      	ldrh	r1, [r7, #10]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fe92 	bl	8002be4 <I2C_MasterRequestWrite>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e08d      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ee0:	e066      	b.n	8001fb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	6a39      	ldr	r1, [r7, #32]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f001 f98a 	bl	8003200 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06b      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_I2C_Master_Transmit+0x188>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	6a39      	ldr	r1, [r7, #32]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f001 f97a 	bl	8003282 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e01a      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d194      	bne.n	8001ee2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	00100002 	.word	0x00100002
 8001ff4:	ffff0000 	.word	0xffff0000

08001ff8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	817b      	strh	r3, [r7, #10]
 8002008:	4613      	mov	r3, r2
 800200a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fafc 	bl	800160c <HAL_GetTick>
 8002014:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 823f 	bne.w	80024a2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	497f      	ldr	r1, [pc, #508]	; (800222c <HAL_I2C_Master_Receive+0x234>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f001 f810 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e232      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Receive+0x54>
 8002048:	2302      	movs	r3, #2
 800204a:	e22b      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2222      	movs	r2, #34	; 0x22
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_I2C_Master_Receive+0x238>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fe14 	bl	8002ce8 <I2C_MasterRequestRead>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1ec      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d113      	bne.n	80020fa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e1c0      	b.n	800247c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d11e      	bne.n	8002140 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002112:	b672      	cpsid	i
}
 8002114:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800213c:	b662      	cpsie	i
}
 800213e:	e035      	b.n	80021ac <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	2b02      	cmp	r3, #2
 8002146:	d11e      	bne.n	8002186 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002156:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002182:	b662      	cpsie	i
}
 8002184:	e012      	b.n	80021ac <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021ac:	e166      	b.n	800247c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	f200 811f 	bhi.w	80023f6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d123      	bne.n	8002208 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 f89d 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e167      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002206:	e139      	b.n	800247c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	2b02      	cmp	r3, #2
 800220e:	d152      	bne.n	80022b6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	2200      	movs	r2, #0
 8002218:	4906      	ldr	r1, [pc, #24]	; (8002234 <HAL_I2C_Master_Receive+0x23c>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 ff1a 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e13c      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
 800222a:	bf00      	nop
 800222c:	00100002 	.word	0x00100002
 8002230:	ffff0000 	.word	0xffff0000
 8002234:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800227e:	b662      	cpsie	i
}
 8002280:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b4:	e0e2      	b.n	800247c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2200      	movs	r2, #0
 80022be:	497b      	ldr	r1, [pc, #492]	; (80024ac <HAL_I2C_Master_Receive+0x4b4>)
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fec7 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0e9      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002316:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_I2C_Master_Receive+0x4b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	08db      	lsrs	r3, r3, #3
 800231c:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_I2C_Master_Receive+0x4bc>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0a1a      	lsrs	r2, r3, #8
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00da      	lsls	r2, r3, #3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	3b01      	subs	r3, #1
 8002334:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d118      	bne.n	800236e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800235e:	b662      	cpsie	i
}
 8002360:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e09a      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d1d9      	bne.n	8002330 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023be:	b662      	cpsie	i
}
 80023c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f4:	e042      	b.n	800247c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 ff82 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e04c      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d118      	bne.n	800247c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f ae94 	bne.w	80021ae <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00010004 	.word	0x00010004
 80024b0:	20000000 	.word	0x20000000
 80024b4:	14f8b589 	.word	0x14f8b589

080024b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	; 0x30
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	460b      	mov	r3, r1
 80024cc:	813b      	strh	r3, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d6:	f7ff f899 	bl	800160c <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	f040 8244 	bne.w	8002972 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2319      	movs	r3, #25
 80024f0:	2201      	movs	r2, #1
 80024f2:	4982      	ldr	r1, [pc, #520]	; (80026fc <HAL_I2C_Mem_Read+0x244>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fdad 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
 8002502:	e237      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Mem_Read+0x5a>
 800250e:	2302      	movs	r3, #2
 8002510:	e230      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d007      	beq.n	8002538 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2222      	movs	r2, #34	; 0x22
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a62      	ldr	r2, [pc, #392]	; (8002700 <HAL_I2C_Mem_Read+0x248>)
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257a:	88f8      	ldrh	r0, [r7, #6]
 800257c:	893a      	ldrh	r2, [r7, #8]
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4603      	mov	r3, r0
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fc7a 	bl	8002e84 <I2C_RequestMemoryRead>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1ec      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e1c0      	b.n	800294c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d11e      	bne.n	8002610 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025e2:	b672      	cpsid	i
}
 80025e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800260c:	b662      	cpsie	i
}
 800260e:	e035      	b.n	800267c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b02      	cmp	r3, #2
 8002616:	d11e      	bne.n	8002656 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002628:	b672      	cpsid	i
}
 800262a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002652:	b662      	cpsie	i
}
 8002654:	e012      	b.n	800267c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800267c:	e166      	b.n	800294c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b03      	cmp	r3, #3
 8002684:	f200 811f 	bhi.w	80028c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b01      	cmp	r3, #1
 800268e:	d123      	bne.n	80026d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fe35 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e167      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d6:	e139      	b.n	800294c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d152      	bne.n	8002786 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2200      	movs	r2, #0
 80026e8:	4906      	ldr	r1, [pc, #24]	; (8002704 <HAL_I2C_Mem_Read+0x24c>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fcb2 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e13c      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
 80026fa:	bf00      	nop
 80026fc:	00100002 	.word	0x00100002
 8002700:	ffff0000 	.word	0xffff0000
 8002704:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002708:	b672      	cpsid	i
}
 800270a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800274e:	b662      	cpsie	i
}
 8002750:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002784:	e0e2      	b.n	800294c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	2200      	movs	r2, #0
 800278e:	497b      	ldr	r1, [pc, #492]	; (800297c <HAL_I2C_Mem_Read+0x4c4>)
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc5f 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0e9      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_I2C_Mem_Read+0x4c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_I2C_Mem_Read+0x4cc>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0a1a      	lsrs	r2, r3, #8
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	3b01      	subs	r3, #1
 8002804:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d118      	bne.n	800283e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800282e:	b662      	cpsie	i
}
 8002830:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e09a      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d1d9      	bne.n	8002800 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800288e:	b662      	cpsie	i
}
 8002890:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c4:	e042      	b.n	800294c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fd1a 	bl	8003304 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e04c      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d118      	bne.n	800294c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f ae94 	bne.w	800267e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	00010004 	.word	0x00010004
 8002980:	20000000 	.word	0x20000000
 8002984:	14f8b589 	.word	0x14f8b589

08002988 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	460b      	mov	r3, r1
 8002996:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7fe fe38 	bl	800160c <HAL_GetTick>
 800299c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 8111 	bne.w	8002bd2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2319      	movs	r3, #25
 80029b6:	2201      	movs	r2, #1
 80029b8:	4988      	ldr	r1, [pc, #544]	; (8002bdc <HAL_I2C_IsDeviceReady+0x254>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb4a 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	e104      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2C_IsDeviceReady+0x50>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0fd      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d007      	beq.n	80029fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2224      	movs	r2, #36	; 0x24
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a70      	ldr	r2, [pc, #448]	; (8002be0 <HAL_I2C_IsDeviceReady+0x258>)
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fb08 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a58:	d103      	bne.n	8002a62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0b6      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fdc9 	bl	800160c <HAL_GetTick>
 8002a7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aaa:	e025      	b.n	8002af8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fe fdae 	bl	800160c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <HAL_I2C_IsDeviceReady+0x13a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22a0      	movs	r2, #160	; 0xa0
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2ba0      	cmp	r3, #160	; 0xa0
 8002b02:	d005      	beq.n	8002b10 <HAL_I2C_IsDeviceReady+0x188>
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_I2C_IsDeviceReady+0x188>
 8002b0a:	7dbb      	ldrb	r3, [r7, #22]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0cd      	beq.n	8002aac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d129      	bne.n	8002b7a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2319      	movs	r3, #25
 8002b52:	2201      	movs	r2, #1
 8002b54:	4921      	ldr	r1, [pc, #132]	; (8002bdc <HAL_I2C_IsDeviceReady+0x254>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa7c 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e036      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e02c      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b92:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2319      	movs	r3, #25
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	490f      	ldr	r1, [pc, #60]	; (8002bdc <HAL_I2C_IsDeviceReady+0x254>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fa58 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e012      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f4ff af32 	bcc.w	8002a22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000

08002be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d006      	beq.n	8002c0e <I2C_MasterRequestWrite+0x2a>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d003      	beq.n	8002c0e <I2C_MasterRequestWrite+0x2a>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0c:	d108      	bne.n	8002c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e00b      	b.n	8002c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d107      	bne.n	8002c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa05 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d103      	bne.n	8002c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e035      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c74:	d108      	bne.n	8002c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	e01b      	b.n	8002cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	11db      	asrs	r3, r3, #7
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0306 	and.w	r3, r3, #6
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f063 030f 	orn	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <I2C_MasterRequestWrite+0xfc>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa2b 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e010      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4907      	ldr	r1, [pc, #28]	; (8002ce4 <I2C_MasterRequestWrite+0x100>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa1b 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00010008 	.word	0x00010008
 8002ce4:	00010002 	.word	0x00010002

08002ce8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d006      	beq.n	8002d22 <I2C_MasterRequestRead+0x3a>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d003      	beq.n	8002d22 <I2C_MasterRequestRead+0x3a>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e00b      	b.n	8002d4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b11      	cmp	r3, #17
 8002d3a:	d107      	bne.n	8002d4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f97b 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d72:	d103      	bne.n	8002d7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e079      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d88:	d108      	bne.n	8002d9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d8a:	897b      	ldrh	r3, [r7, #10]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	e05f      	b.n	8002e5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	11db      	asrs	r3, r3, #7
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 0306 	and.w	r3, r3, #6
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f063 030f 	orn	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4930      	ldr	r1, [pc, #192]	; (8002e7c <I2C_MasterRequestRead+0x194>)
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f9a1 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e054      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4929      	ldr	r1, [pc, #164]	; (8002e80 <I2C_MasterRequestRead+0x198>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f991 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e044      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f919 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e36:	d103      	bne.n	8002e40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e017      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	11db      	asrs	r3, r3, #7
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0306 	and.w	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f063 030e 	orn	r3, r3, #14
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <I2C_MasterRequestRead+0x198>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f94d 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	00010008 	.word	0x00010008
 8002e80:	00010002 	.word	0x00010002

08002e84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8c2 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d103      	bne.n	8002eee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0aa      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	4952      	ldr	r1, [pc, #328]	; (8003050 <I2C_RequestMemoryRead+0x1cc>)
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f8fa 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e097      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f964 	bl	8003200 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e076      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f60:	893b      	ldrh	r3, [r7, #8]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	e021      	b.n	8002fb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f93e 	bl	8003200 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d107      	bne.n	8002fa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e050      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa6:	893b      	ldrh	r3, [r7, #8]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f923 	bl	8003200 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e035      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f82b 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d103      	bne.n	800301c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e013      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	4906      	ldr	r1, [pc, #24]	; (8003050 <I2C_RequestMemoryRead+0x1cc>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f863 	bl	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00010002 	.word	0x00010002

08003054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003064:	e025      	b.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d021      	beq.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe facd 	bl	800160c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x30>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e023      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10d      	bne.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	e00c      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d0b6      	beq.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003110:	e051      	b.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d123      	bne.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800313a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0204 	orr.w	r2, r3, #4
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e046      	b.n	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d021      	beq.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7fe fa4b 	bl	800160c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e020      	b.n	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10c      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e00b      	b.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d18d      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320c:	e02d      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f8ce 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e02d      	b.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe f9f1 	bl	800160c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e007      	b.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d1ca      	bne.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800328e:	e02d      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f88d 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e02d      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d021      	beq.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a8:	f7fe f9b0 	bl	800160c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e007      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d1ca      	bne.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003310:	e042      	b.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d119      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e029      	b.n	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe f95a 	bl	800160c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d1b5      	bne.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d11b      	bne.n	8003400 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e272      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8087 	beq.w	800353a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800342c:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b04      	cmp	r3, #4
 8003436:	d00c      	beq.n	8003452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d112      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
 8003444:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06c      	beq.n	8003538 <HAL_RCC_OscConfig+0x12c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d168      	bne.n	8003538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e24c      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x76>
 8003474:	4b80      	ldr	r3, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7f      	ldr	r2, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e02e      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0xbc>
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034c8:	4b6b      	ldr	r3, [pc, #428]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f890 	bl	800160c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe f88c 	bl	800160c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e200      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe4>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe f87c 	bl	800160c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe f878 	bl	800160c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1ec      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x10c>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
 800355e:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c0      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4939      	ldr	r1, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fe f831 	bl	800160c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fe f82d 	bl	800160c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe f810 	bl	800160c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe f80c 	bl	800160c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e180      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03a      	beq.n	8003690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fd fff0 	bl	800160c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd ffec 	bl	800160c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e160      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364e:	2001      	movs	r0, #1
 8003650:	f000 fad8 	bl	8003c04 <RCC_Delay>
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7fd ffd6 	bl	800160c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003662:	e00f      	b.n	8003684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7fd ffd2 	bl	800160c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d908      	bls.n	8003684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e146      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	42420000 	.word	0x42420000
 8003680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e9      	bne.n	8003664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a6 	beq.w	80037ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a87      	ldr	r2, [pc, #540]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd ff93 	bl	800160c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fd ff8f 	bl	800160c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e103      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x312>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e02d      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x334>
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	e01c      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d10c      	bne.n	8003762 <HAL_RCC_OscConfig+0x356>
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	e00b      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd ff43 	bl	800160c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd ff3f 	bl	800160c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0b1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCC_OscConfig+0x37e>
 80037ac:	e014      	b.n	80037d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fd ff2d 	bl	800160c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd ff29 	bl	800160c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e09b      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8087 	beq.w	8003902 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d061      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d146      	bne.n	8003896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fd fefd 	bl	800160c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fd fef9 	bl	800160c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e06d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d108      	bne.n	8003850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a19      	ldr	r1, [r3, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	430b      	orrs	r3, r1
 8003862:	491b      	ldr	r1, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fecd 	bl	800160c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fec9 	bl	800160c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x46a>
 8003894:	e035      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd feb6 	bl	800160c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd feb2 	bl	800160c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e026      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x498>
 80038c2:	e01e      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e019      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x500>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0d0      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4965      	ldr	r1, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800398e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d040      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e073      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4936      	ldr	r1, [pc, #216]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fe04 	bl	800160c <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fe00 	bl	800160c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e053      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d210      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fd62 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08004774 	.word	0x08004774
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b490      	push	{r4, r7}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003aea:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xac>)
 8003aec:	1d3c      	adds	r4, r7, #4
 8003aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003af4:	f240 2301 	movw	r3, #513	; 0x201
 8003af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x46>
 8003b22:	e02b      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b26:	623b      	str	r3, [r7, #32]
      break;
 8003b28:	e02b      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3328      	adds	r3, #40	; 0x28
 8003b34:	443b      	add	r3, r7
 8003b36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d012      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0c5b      	lsrs	r3, r3, #17
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	3328      	adds	r3, #40	; 0x28
 8003b52:	443b      	add	r3, r7
 8003b54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b5e:	fb03 f202 	mul.w	r2, r3, r2
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e004      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	623b      	str	r3, [r7, #32]
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6a3b      	ldr	r3, [r7, #32]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc90      	pop	{r4, r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	08004764 	.word	0x08004764
 8003b94:	40021000 	.word	0x40021000
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	003d0900 	.word	0x003d0900

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff2 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	08004784 	.word	0x08004784

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	0adb      	lsrs	r3, r3, #11
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08004784 	.word	0x08004784

08003c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <RCC_Delay+0x34>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <RCC_Delay+0x38>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0a5b      	lsrs	r3, r3, #9
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c20:	bf00      	nop
  }
  while (Delay --);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f9      	bne.n	8003c20 <RCC_Delay+0x1c>
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	10624dd3 	.word	0x10624dd3

08003c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e076      	b.n	8003d40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d009      	beq.n	8003c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fc fee2 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	0c1a      	lsrs	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f002 0204 	and.w	r2, r2, #4
 8003d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e041      	b.n	8003dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc ff76 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fa70 	bl	800426c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d001      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e03a      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_TIM_Base_Start_IT+0x98>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x58>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x58>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x58>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d111      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d010      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e007      	b.n	8003e74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800

08003e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0202 	mvn.w	r2, #2
 8003eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9b1 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9a4 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f9b3 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0204 	mvn.w	r2, #4
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f987 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f97a 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f989 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0208 	mvn.w	r2, #8
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2204      	movs	r2, #4
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f95d 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f950 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f95f 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0210 	mvn.w	r2, #16
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f933 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f926 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f935 	bl	8004248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0201 	mvn.w	r2, #1
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc ff82 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa77 	bl	800452a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8f9 	bl	800425a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b20      	cmp	r3, #32
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b20      	cmp	r3, #32
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0220 	mvn.w	r2, #32
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa42 	bl	8004518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0b3      	b.n	800421c <HAL_TIM_ConfigClockSource+0x180>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d03e      	beq.n	800416c <HAL_TIM_ConfigClockSource+0xd0>
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	f200 8087 	bhi.w	8004204 <HAL_TIM_ConfigClockSource+0x168>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	f000 8085 	beq.w	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d87f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 8004104:	2b70      	cmp	r3, #112	; 0x70
 8004106:	d01a      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xa2>
 8004108:	2b70      	cmp	r3, #112	; 0x70
 800410a:	d87b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 800410c:	2b60      	cmp	r3, #96	; 0x60
 800410e:	d050      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x116>
 8004110:	2b60      	cmp	r3, #96	; 0x60
 8004112:	d877      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 8004114:	2b50      	cmp	r3, #80	; 0x50
 8004116:	d03c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xf6>
 8004118:	2b50      	cmp	r3, #80	; 0x50
 800411a:	d873      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d058      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x136>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d86f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d064      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x156>
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d86b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 800412c:	2b20      	cmp	r3, #32
 800412e:	d060      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x156>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d867      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d05c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x156>
 8004138:	2b10      	cmp	r3, #16
 800413a:	d05a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800413c:	e062      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f000 f966 	bl	800441e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004160:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
      break;
 800416a:	e04e      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f000 f94f 	bl	800441e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e03b      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	461a      	mov	r2, r3
 80041a0:	f000 f8c6 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2150      	movs	r1, #80	; 0x50
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f91d 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041b0:	e02b      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 f8e4 	bl	800438c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2160      	movs	r1, #96	; 0x60
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f90d 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041d0:	e01b      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f8a6 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f8fd 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041f0:	e00b      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f000 f8f4 	bl	80043ea <TIM_ITRx_SetConfig>
        break;
 8004202:	e002      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004208:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a29      	ldr	r2, [pc, #164]	; (8004324 <TIM_Base_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0x30>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0x30>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a26      	ldr	r2, [pc, #152]	; (8004328 <TIM_Base_SetConfig+0xbc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0x30>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <TIM_Base_SetConfig+0xc0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <TIM_Base_SetConfig+0xb8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0x62>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a19      	ldr	r2, [pc, #100]	; (8004328 <TIM_Base_SetConfig+0xbc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x62>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <TIM_Base_SetConfig+0xc0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <TIM_Base_SetConfig+0xb8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d103      	bne.n	8004314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	615a      	str	r2, [r3, #20]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0210 	bic.w	r2, r3, #16
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004438:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	021a      	lsls	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	609a      	str	r2, [r3, #8]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e046      	b.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d009      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10c      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800

08004518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e03f      	b.n	80045ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc fbcc 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f829 	bl	80045d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004612:	f023 030c 	bic.w	r3, r3, #12
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	430b      	orrs	r3, r1
 800461e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <UART_SetConfig+0x114>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7ff facc 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	e002      	b.n	800464e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7ff fab4 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <UART_SetConfig+0x118>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	0119      	lsls	r1, r3, #4
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009a      	lsls	r2, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <UART_SetConfig+0x118>)
 8004686:	fba3 0302 	umull	r0, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2064      	movs	r0, #100	; 0x64
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a4:	4419      	add	r1, r3
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <UART_SetConfig+0x118>)
 80046be:	fba3 0302 	umull	r0, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2064      	movs	r0, #100	; 0x64
 80046c6:	fb00 f303 	mul.w	r3, r0, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <UART_SetConfig+0x118>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	440a      	add	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40013800 	.word	0x40013800
 80046f0:	51eb851f 	.word	0x51eb851f

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	2600      	movs	r6, #0
 80046f8:	4d0c      	ldr	r5, [pc, #48]	; (800472c <__libc_init_array+0x38>)
 80046fa:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fc:	1b64      	subs	r4, r4, r5
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	f000 f822 	bl	800474c <_init>
 8004708:	2600      	movs	r6, #0
 800470a:	4d0a      	ldr	r5, [pc, #40]	; (8004734 <__libc_init_array+0x40>)
 800470c:	4c0a      	ldr	r4, [pc, #40]	; (8004738 <__libc_init_array+0x44>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	0800478c 	.word	0x0800478c
 8004730:	0800478c 	.word	0x0800478c
 8004734:	0800478c 	.word	0x0800478c
 8004738:	08004790 	.word	0x08004790

0800473c <memset>:
 800473c:	4603      	mov	r3, r0
 800473e:	4402      	add	r2, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
