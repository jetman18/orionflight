
mario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e10  08004e10  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e10  08004e10  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e10  08004e10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000010  08004e28  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004e28  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f9e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c44  00000000  00000000  00031fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b04  00000000  00000000  00036fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bfa  00000000  00000000  0004faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8d9  00000000  00000000  0006569e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4f77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f2c  00000000  00000000  000f4fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004dd0 	.word	0x08004dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004dd0 	.word	0x08004dd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <MX_GPIO_Init+0x120>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <MX_GPIO_Init+0x120>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x120>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <MX_GPIO_Init+0x120>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <MX_GPIO_Init+0x120>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <MX_GPIO_Init+0x120>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <MX_GPIO_Init+0x120>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800103a:	482a      	ldr	r0, [pc, #168]	; (80010e4 <MX_GPIO_Init+0x124>)
 800103c:	f001 feb3 	bl	8002da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2118      	movs	r1, #24
 8001044:	4828      	ldr	r0, [pc, #160]	; (80010e8 <MX_GPIO_Init+0x128>)
 8001046:	f001 feae 	bl	8002da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800104a:	2200      	movs	r2, #0
 800104c:	f241 0178 	movw	r1, #4216	; 0x1078
 8001050:	4826      	ldr	r0, [pc, #152]	; (80010ec <MX_GPIO_Init+0x12c>)
 8001052:	f001 fea8 	bl	8002da6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001056:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <MX_GPIO_Init+0x124>)
 8001070:	f001 fcfe 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_GPIO_Init+0x130>)
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <MX_GPIO_Init+0x124>)
 800108a:	f001 fcf1 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800108e:	2318      	movs	r3, #24
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_GPIO_Init+0x128>)
 80010a6:	f001 fce3 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010aa:	f241 0378 	movw	r3, #4216	; 0x1078
 80010ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <MX_GPIO_Init+0x12c>)
 80010c4:	f001 fcd4 	bl	8002a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2028      	movs	r0, #40	; 0x28
 80010ce:	f001 fc98 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	f001 fcb1 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	10310000 	.word	0x10310000

080010f4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C2_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C2_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C2_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C2_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C2_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C2_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C2_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C2_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C2_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C2_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C2_Init+0x50>)
 8001132:	f001 fe81 	bl	8002e38 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f8a2 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000002c 	.word	0x2000002c
 8001148:	40005800 	.word	0x40005800
 800114c:	00061a80 	.word	0x00061a80

08001150 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x74>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d124      	bne.n	80011ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001188:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800118c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_I2C_MspInit+0x7c>)
 800119e:	f001 fc67 	bl	8002a70 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_I2C_MspInit+0x78>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40005800 	.word	0x40005800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f001 fab8 	bl	8002748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f80f 	bl	80011fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f7ff fef0 	bl	8000fc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011e0:	f000 fa22 	bl	8001628 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80011e4:	f000 f9ac 	bl	8001540 <MX_TIM4_Init>
  MX_SPI1_Init();
 80011e8:	f000 f852 	bl	8001290 <MX_SPI1_Init>
  MX_I2C2_Init();
 80011ec:	f7ff ff82 	bl	80010f4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80011f0:	f000 f884 	bl	80012fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
    main_loop();// inti loop
 80011f4:	f000 fbd0 	bl	8001998 <main_loop>
    // ptotototot
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0x28>

080011fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b090      	sub	sp, #64	; 0x40
 80011fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2228      	movs	r2, #40	; 0x28
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fdd9 	bl	8004dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f001 ff3c 	bl	80030c0 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800124e:	f000 f819 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 f9a9 	bl	80035c4 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001278:	f000 f804 	bl	8001284 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3740      	adds	r7, #64	; 0x40
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_SPI1_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_SPI1_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI1_Init+0x64>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012c4:	2230      	movs	r2, #48	; 0x30
 80012c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012dc:	220a      	movs	r2, #10
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012e2:	f002 fb07 	bl	80038f4 <HAL_SPI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012ec:	f7ff ffca 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000080 	.word	0x20000080
 80012f8:	40013000 	.word	0x40013000

080012fc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_SPI2_Init+0x64>)
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <MX_SPI2_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI2_Init+0x64>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI2_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_SPI2_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI2_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI2_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI2_Init+0x64>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI2_Init+0x64>)
 8001330:	2220      	movs	r2, #32
 8001332:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_SPI2_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI2_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_SPI2_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI2_Init+0x64>)
 8001348:	220a      	movs	r2, #10
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_SPI2_Init+0x64>)
 800134e:	f002 fad1 	bl	80038f4 <HAL_SPI_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001358:	f7ff ff94 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000d8 	.word	0x200000d8
 8001364:	40003800 	.word	0x40003800

08001368 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a31      	ldr	r2, [pc, #196]	; (8001448 <HAL_SPI_MspInit+0xe0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d130      	bne.n	80013ea <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_SPI_MspInit+0xe4>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_SPI_MspInit+0xe4>)
 800138e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_SPI_MspInit+0xe4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_SPI_MspInit+0xe4>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_SPI_MspInit+0xe4>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_SPI_MspInit+0xe4>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <HAL_SPI_MspInit+0xe8>)
 80013cc:	f001 fb50 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4619      	mov	r1, r3
 80013e2:	481b      	ldr	r0, [pc, #108]	; (8001450 <HAL_SPI_MspInit+0xe8>)
 80013e4:	f001 fb44 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013e8:	e029      	b.n	800143e <HAL_SPI_MspInit+0xd6>
  else if(spiHandle->Instance==SPI2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_SPI_MspInit+0xec>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d124      	bne.n	800143e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_SPI_MspInit+0xe4>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_SPI_MspInit+0xe4>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_SPI_MspInit+0xe4>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_SPI_MspInit+0xe4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_SPI_MspInit+0xe4>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_SPI_MspInit+0xe4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001424:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <HAL_SPI_MspInit+0xf0>)
 800143a:	f001 fb19 	bl	8002a70 <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013000 	.word	0x40013000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800
 8001454:	40003800 	.word	0x40003800
 8001458:	40010c00 	.word	0x40010c00

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_MspInit+0x5c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_MspInit+0x5c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_MspInit+0x60>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_MspInit+0x60>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f001 f965 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM4_IRQHandler+0x10>)
 8001516:	f002 fffb 	bl	8004510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000130 	.word	0x20000130

08001524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001528:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800152c:	f001 fc6c 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM4_Init+0x94>)
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <MX_TIM4_Init+0x98>)
 8001560:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_TIM4_Init+0x94>)
 8001564:	2247      	movs	r2, #71	; 0x47
 8001566:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_TIM4_Init+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_TIM4_Init+0x94>)
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_TIM4_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_TIM4_Init+0x94>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_TIM4_Init+0x94>)
 8001584:	f002 ff22 	bl	80043cc <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800158e:	f7ff fe79 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_TIM4_Init+0x94>)
 80015a0:	f003 f8be 	bl	8004720 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f7ff fe6b 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_TIM4_Init+0x94>)
 80015bc:	f003 fa90 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015c6:	f7ff fe5d 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000130 	.word	0x20000130
 80015d8:	40000800 	.word	0x40000800

080015dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_TIM_Base_MspInit+0x48>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_TIM_Base_MspInit+0x48>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	201e      	movs	r0, #30
 800160c:	f001 f9f9 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001610:	201e      	movs	r0, #30
 8001612:	f001 fa12 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40000800 	.word	0x40000800
 8001624:	40021000 	.word	0x40021000

08001628 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_USART1_UART_Init+0x50>)
 8001630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_USART1_UART_Init+0x4c>)
 8001660:	f003 faae 	bl	8004bc0 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800166a:	f7ff fe0b 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000178 	.word	0x20000178
 8001678:	40013800 	.word	0x40013800

0800167c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_UART_MspInit+0x8c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d131      	bne.n	8001700 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_UART_MspInit+0x90>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_UART_MspInit+0x90>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_UART_MspInit+0x90>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x90>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_UART_MspInit+0x90>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_UART_MspInit+0x90>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <HAL_UART_MspInit+0x94>)
 80016e2:	f001 f9c5 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x94>)
 80016fc:	f001 f9b8 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40013800 	.word	0x40013800
 800170c:	40021000 	.word	0x40021000
 8001710:	40010800 	.word	0x40010800

08001714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800173a:	f7ff fefb 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f003 fb1b 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001742:	f7ff fd45 	bl	80011d0 <main>
  bx lr
 8001746:	4770      	bx	lr
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001750:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8001754:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001758:	200002a8 	.word	0x200002a8

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>
	...

08001760 <looptime>:
uint16_t count=1;
uint16_t feq=0;
uint64_t time1,time2;
float dT;
void looptime(uint16_t us)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	81fb      	strh	r3, [r7, #14]
	feq = 1/(us*0.000001f);
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9c6 	bl	8000b00 <__aeabi_i2f>
 8001774:	4603      	mov	r3, r0
 8001776:	4928      	ldr	r1, [pc, #160]	; (8001818 <looptime+0xb8>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa15 	bl	8000ba8 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001786:	f7ff fac3 	bl	8000d10 <__aeabi_fdiv>
 800178a:	4603      	mov	r3, r0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fbf7 	bl	8000f80 <__aeabi_f2uiz>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <looptime+0xbc>)
 8001798:	801a      	strh	r2, [r3, #0]
	count ++;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <looptime+0xc0>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <looptime+0xc0>)
 80017a4:	801a      	strh	r2, [r3, #0]
	if(count >= feq)count=1;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <looptime+0xc0>)
 80017a8:	881a      	ldrh	r2, [r3, #0]
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <looptime+0xbc>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d302      	bcc.n	80017b8 <looptime+0x58>
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <looptime+0xc0>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	801a      	strh	r2, [r3, #0]
    do{
   	 time2=micros();
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <looptime+0xc4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	2200      	movs	r2, #0
 80017c0:	469a      	mov	sl, r3
 80017c2:	4693      	mov	fp, r2
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <looptime+0xc8>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	eb1a 0102 	adds.w	r1, sl, r2
 80017ce:	6039      	str	r1, [r7, #0]
 80017d0:	eb4b 0303 	adc.w	r3, fp, r3
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <looptime+0xcc>)
 80017d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80017dc:	e9c3 1200 	strd	r1, r2, [r3]
     }while((time2-time1)<us);
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <looptime+0xcc>)
 80017e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <looptime+0xd0>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	1a84      	subs	r4, r0, r2
 80017ee:	eb61 0503 	sbc.w	r5, r1, r3
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	2200      	movs	r2, #0
 80017f6:	4698      	mov	r8, r3
 80017f8:	4691      	mov	r9, r2
 80017fa:	4544      	cmp	r4, r8
 80017fc:	eb75 0309 	sbcs.w	r3, r5, r9
 8001800:	d3da      	bcc.n	80017b8 <looptime+0x58>
    time1=time2;
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <looptime+0xcc>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	4909      	ldr	r1, [pc, #36]	; (8001830 <looptime+0xd0>)
 800180a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001818:	358637bd 	.word	0x358637bd
 800181c:	200001c8 	.word	0x200001c8
 8001820:	20000004 	.word	0x20000004
 8001824:	20000130 	.word	0x20000130
 8001828:	200001c0 	.word	0x200001c0
 800182c:	200001d8 	.word	0x200001d8
 8001830:	200001d0 	.word	0x200001d0

08001834 <fequency_division>:
int fequency_division(uint16_t division){
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
    if(count%division==0)return 1;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <fequency_division+0x3c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	fbb3 f1f2 	udiv	r1, r3, r2
 8001848:	fb01 f202 	mul.w	r2, r1, r2
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <fequency_division+0x24>
 8001854:	2301      	movs	r3, #1
 8001856:	e006      	b.n	8001866 <fequency_division+0x32>
    else if(feq==0)return 0;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <fequency_division+0x40>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <fequency_division+0x30>
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <fequency_division+0x32>
    return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000004 	.word	0x20000004
 8001874:	200001c8 	.word	0x200001c8

08001878 <callBackFuncition>:
/*brief rc channel reveive
 *Param  chh rcChannel
 */


void callBackFuncition(rcChannel_t *chh){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	static uint8_t start = 0;
	static uint8_t count = 0;
	static uint32_t timeVal,currentTime,prerviTime;
	static uint16_t time;
    /********************/
	if(!start){
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <callBackFuncition+0xfc>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d134      	bne.n	80018f2 <callBackFuncition+0x7a>
		if(GET_PIN_STATE){
 8001888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188c:	483a      	ldr	r0, [pc, #232]	; (8001978 <callBackFuncition+0x100>)
 800188e:	f001 fa73 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <callBackFuncition+0x36>
			timeVal=micros();
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <callBackFuncition+0x104>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <callBackFuncition+0x108>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	4613      	mov	r3, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	4a36      	ldr	r2, [pc, #216]	; (8001984 <callBackFuncition+0x10c>)
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e021      	b.n	80018f2 <callBackFuncition+0x7a>
		  }
		else if(!GET_PIN_STATE){
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	4831      	ldr	r0, [pc, #196]	; (8001978 <callBackFuncition+0x100>)
 80018b4:	f001 fa60 	bl	8002d78 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <callBackFuncition+0x7a>
		   time=micros()-timeVal;
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <callBackFuncition+0x104>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	b299      	uxth	r1, r3
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <callBackFuncition+0x108>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	b293      	uxth	r3, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <callBackFuncition+0x10c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <callBackFuncition+0x110>)
 80018de:	801a      	strh	r2, [r3, #0]
		   if(time>TIME_MARK_START)start=1;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <callBackFuncition+0x110>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d902      	bls.n	80018f2 <callBackFuncition+0x7a>
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <callBackFuncition+0xfc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(start && !GET_PIN_STATE){
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <callBackFuncition+0xfc>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d037      	beq.n	800196a <callBackFuncition+0xf2>
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	481e      	ldr	r0, [pc, #120]	; (8001978 <callBackFuncition+0x100>)
 8001900:	f001 fa3a 	bl	8002d78 <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d12f      	bne.n	800196a <callBackFuncition+0xf2>
		currentTime=micros();
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <callBackFuncition+0x104>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <callBackFuncition+0x108>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	4613      	mov	r3, r2
 8001918:	440b      	add	r3, r1
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <callBackFuncition+0x114>)
 800191c:	6013      	str	r3, [r2, #0]
		if(count>0)chh->ch[count-1]=currentTime-prerviTime;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <callBackFuncition+0x118>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <callBackFuncition+0xca>
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <callBackFuncition+0x114>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b299      	uxth	r1, r3
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <callBackFuncition+0x11c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <callBackFuncition+0x118>)
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	3a01      	subs	r2, #1
 8001938:	1acb      	subs	r3, r1, r3
 800193a:	b299      	uxth	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		prerviTime=currentTime;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <callBackFuncition+0x114>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <callBackFuncition+0x11c>)
 8001948:	6013      	str	r3, [r2, #0]
		count++;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <callBackFuncition+0x118>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <callBackFuncition+0x118>)
 8001954:	701a      	strb	r2, [r3, #0]
		if(count > (NUM_OF_CHANNEL + 1) ){
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <callBackFuncition+0x118>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b09      	cmp	r3, #9
 800195c:	d905      	bls.n	800196a <callBackFuncition+0xf2>
			start =0;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <callBackFuncition+0xfc>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
			count=0;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <callBackFuncition+0x118>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000022c 	.word	0x2000022c
 8001978:	40011000 	.word	0x40011000
 800197c:	20000130 	.word	0x20000130
 8001980:	200001c0 	.word	0x200001c0
 8001984:	20000230 	.word	0x20000230
 8001988:	20000234 	.word	0x20000234
 800198c:	20000238 	.word	0x20000238
 8001990:	2000023c 	.word	0x2000023c
 8001994:	20000240 	.word	0x20000240

08001998 <main_loop>:
rcChannel_t rx;

float pid_pitch,pid_roll,pid_yaw;
pid_gain_t pitch_t,roll_t,yaw_t;

void main_loop(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8
	// int main
	HAL_TIM_Base_Start_IT(&htim4);
 800199e:	4837      	ldr	r0, [pc, #220]	; (8001a7c <main_loop+0xe4>)
 80019a0:	f002 fd64 	bl	800446c <HAL_TIM_Base_Start_IT>
	MPU_init();
 80019a4:	f000 fcca 	bl	800233c <MPU_init>

	//qmc5883_init();


	/*init pid gain*/
	pitch_t.kp = 3.0f;
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <main_loop+0xe8>)
 80019aa:	4a36      	ldr	r2, [pc, #216]	; (8001a84 <main_loop+0xec>)
 80019ac:	601a      	str	r2, [r3, #0]
	pitch_t.ki = 1.5f;
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <main_loop+0xe8>)
 80019b0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80019b4:	605a      	str	r2, [r3, #4]
	pitch_t.kd = 1.0f;
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <main_loop+0xe8>)
 80019b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019bc:	609a      	str	r2, [r3, #8]

	roll_t.kp = 3.0f;//3
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <main_loop+0xf0>)
 80019c0:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <main_loop+0xec>)
 80019c2:	601a      	str	r2, [r3, #0]
	roll_t.ki = 1.5f;//1
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <main_loop+0xf0>)
 80019c6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80019ca:	605a      	str	r2, [r3, #4]
	roll_t.kd = 1.0f;
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <main_loop+0xf0>)
 80019ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019d2:	609a      	str	r2, [r3, #8]

	yaw_t.kp = 0;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <main_loop+0xf4>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
	yaw_t.ki = 0;
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <main_loop+0xf4>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
	yaw_t.kd = 0;
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <main_loop+0xf4>)
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
	////////////////////////////////////////////////////
	while(1){


        MPU_update(&mpu,LOOPTIME);  //4000 DELTA T
 80019ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019f0:	4827      	ldr	r0, [pc, #156]	; (8001a90 <main_loop+0xf8>)
 80019f2:	f000 fced 	bl	80023d0 <MPU_update>

		/* update PID 400hz*/
       FEQUENCY_DIV(2){
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff ff1c 	bl	8001834 <fequency_division>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02c      	beq.n	8001a5c <main_loop+0xc4>
			pid_pitch = pidCalcutate(pitch_t,mpu.pitch,0,LOOPTIME);
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <main_loop+0xf8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <main_loop+0xe8>)
 8001a08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a0c:	9101      	str	r1, [sp, #4]
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	9100      	str	r1, [sp, #0]
 8001a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a16:	f000 fa0f 	bl	8001e38 <pidCalcutate>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <main_loop+0xfc>)
 8001a1e:	6013      	str	r3, [r2, #0]
			pid_roll  = pidCalcutate(roll_t,mpu.roll,0,LOOPTIME);
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <main_loop+0xf8>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <main_loop+0xf0>)
 8001a26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a2a:	9101      	str	r1, [sp, #4]
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	9100      	str	r1, [sp, #0]
 8001a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a34:	f000 fa00 	bl	8001e38 <pidCalcutate>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <main_loop+0x100>)
 8001a3c:	6013      	str	r3, [r2, #0]
			pid_yaw   = pidCalcutate(yaw_t,mpu.yaw,0,LOOPTIME);
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <main_loop+0xf8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <main_loop+0xf4>)
 8001a44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a48:	9101      	str	r1, [sp, #4]
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	9100      	str	r1, [sp, #0]
 8001a50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a52:	f000 f9f1 	bl	8001e38 <pidCalcutate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <main_loop+0x104>)
 8001a5a:	6013      	str	r3, [r2, #0]
			/* update throtle to esc */
		    //writePWM(moto);
		   }


        FEQUENCY_DIV(250){
 8001a5c:	20fa      	movs	r0, #250	; 0xfa
 8001a5e:	f7ff fee9 	bl	8001834 <fequency_division>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <main_loop+0xda>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <main_loop+0x108>)
 8001a6e:	f001 f9b2 	bl	8002dd6 <HAL_GPIO_TogglePin>
		}

		/*loop feq */
		looptime(LOOPTIME);  //500hz
 8001a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a76:	f7ff fe73 	bl	8001760 <looptime>
        MPU_update(&mpu,LOOPTIME);  //4000 DELTA T
 8001a7a:	e7b7      	b.n	80019ec <main_loop+0x54>
 8001a7c:	20000130 	.word	0x20000130
 8001a80:	20000208 	.word	0x20000208
 8001a84:	40400000 	.word	0x40400000
 8001a88:	20000214 	.word	0x20000214
 8001a8c:	20000220 	.word	0x20000220
 8001a90:	200001e0 	.word	0x200001e0
 8001a94:	200001fc 	.word	0x200001fc
 8001a98:	20000200 	.word	0x20000200
 8001a9c:	20000204 	.word	0x20000204
 8001aa0:	40011000 	.word	0x40011000

08001aa4 <HAL_TIM_PeriodElapsedCallback>:


/*-------------ISR HANDLER----------------------*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001aa4:	b4b0      	push	{r4, r5, r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d10a      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		callBack();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001abe:	1854      	adds	r4, r2, r1
 8001ac0:	f143 0500 	adc.w	r5, r3, #0
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ac6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bcb0      	pop	{r4, r5, r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000130 	.word	0x20000130
 8001ad8:	200001c0 	.word	0x200001c0

08001adc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14) // If The INT Source Is EXTI 14
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aec:	d102      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	callBackFuncition(&rx);
 8001aee:	4803      	ldr	r0, [pc, #12]	; (8001afc <HAL_GPIO_EXTI_Callback+0x20>)
 8001af0:	f7ff fec2 	bl	8001878 <callBackFuncition>
    }

}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001ec 	.word	0x200001ec

08001b00 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fa13 	bl	8000f34 <__aeabi_f2iz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f113 0f20 	cmn.w	r3, #32
 8001b18:	db02      	blt.n	8001b20 <sin_approx+0x20>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	dd08      	ble.n	8001b32 <sin_approx+0x32>
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e074      	b.n	8001c10 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8001b26:	493c      	ldr	r1, [pc, #240]	; (8001c18 <sin_approx+0x118>)
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe ff33 	bl	8000994 <__aeabi_fsub>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	493a      	ldr	r1, [pc, #232]	; (8001c1c <sin_approx+0x11c>)
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff f9f3 	bl	8000f20 <__aeabi_fcmpgt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f2      	bne.n	8001b26 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8001b40:	e005      	b.n	8001b4e <sin_approx+0x4e>
 8001b42:	4935      	ldr	r1, [pc, #212]	; (8001c18 <sin_approx+0x118>)
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe ff27 	bl	8000998 <__addsf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4934      	ldr	r1, [pc, #208]	; (8001c20 <sin_approx+0x120>)
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff f9c7 	bl	8000ee4 <__aeabi_fcmplt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f2      	bne.n	8001b42 <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8001b5c:	4931      	ldr	r1, [pc, #196]	; (8001c24 <sin_approx+0x124>)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff f9de 	bl	8000f20 <__aeabi_fcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <sin_approx+0x82>
 8001b6a:	492e      	ldr	r1, [pc, #184]	; (8001c24 <sin_approx+0x124>)
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe ff11 	bl	8000994 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	482b      	ldr	r0, [pc, #172]	; (8001c24 <sin_approx+0x124>)
 8001b78:	f7fe ff0c 	bl	8000994 <__aeabi_fsub>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e011      	b.n	8001ba6 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8001b82:	4929      	ldr	r1, [pc, #164]	; (8001c28 <sin_approx+0x128>)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff f9ad 	bl	8000ee4 <__aeabi_fcmplt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <sin_approx+0xa6>
 8001b90:	4924      	ldr	r1, [pc, #144]	; (8001c24 <sin_approx+0x124>)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe ff00 	bl	8000998 <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4822      	ldr	r0, [pc, #136]	; (8001c28 <sin_approx+0x128>)
 8001b9e:	f7fe fef9 	bl	8000994 <__aeabi_fsub>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7fe fffd 	bl	8000ba8 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fff7 	bl	8000ba8 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461c      	mov	r4, r3
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	68b8      	ldr	r0, [r7, #8]
 8001bc4:	f7fe fff0 	bl	8000ba8 <__aeabi_fmul>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4918      	ldr	r1, [pc, #96]	; (8001c2c <sin_approx+0x12c>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fee1 	bl	8000994 <__aeabi_fsub>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ffe6 	bl	8000ba8 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4914      	ldr	r1, [pc, #80]	; (8001c30 <sin_approx+0x130>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fed9 	bl	8000998 <__addsf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ffdc 	bl	8000ba8 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4910      	ldr	r1, [pc, #64]	; (8001c34 <sin_approx+0x134>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fecd 	bl	8000994 <__aeabi_fsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7fe ffd2 	bl	8000ba8 <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fec5 	bl	8000998 <__addsf3>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	40c90fdb 	.word	0x40c90fdb
 8001c1c:	40490fdb 	.word	0x40490fdb
 8001c20:	c0490fdb 	.word	0xc0490fdb
 8001c24:	3fc90fdb 	.word	0x3fc90fdb
 8001c28:	bfc90fdb 	.word	0xbfc90fdb
 8001c2c:	3941e792 	.word	0x3941e792
 8001c30:	3c083097 	.word	0x3c083097
 8001c34:	3e2aa815 	.word	0x3e2aa815

08001c38 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08b      	sub	sp, #44	; 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c48:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c50:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	69b8      	ldr	r0, [r7, #24]
 8001c5e:	f7ff f95f 	bl	8000f20 <__aeabi_fcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <atan2_approx+0x34>
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	e000      	b.n	8001c6e <atan2_approx+0x36>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c76:	f7ff f92b 	bl	8000ed0 <__aeabi_fcmpeq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d114      	bne.n	8001caa <atan2_approx+0x72>
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	6938      	ldr	r0, [r7, #16]
 8001c8c:	f7ff f92a 	bl	8000ee4 <__aeabi_fcmplt>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <atan2_approx+0x62>
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	e000      	b.n	8001c9c <atan2_approx+0x64>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f836 	bl	8000d10 <__aeabi_fdiv>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e002      	b.n	8001cb0 <atan2_approx+0x78>
    else res = 0.0f;
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001cb0:	4938      	ldr	r1, [pc, #224]	; (8001d94 <atan2_approx+0x15c>)
 8001cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cb4:	f7fe ff78 	bl	8000ba8 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4937      	ldr	r1, [pc, #220]	; (8001d98 <atan2_approx+0x160>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fe69 	bl	8000994 <__aeabi_fsub>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ff6e 	bl	8000ba8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4933      	ldr	r1, [pc, #204]	; (8001d9c <atan2_approx+0x164>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fe5f 	bl	8000994 <__aeabi_fsub>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ff64 	bl	8000ba8 <__aeabi_fmul>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	492f      	ldr	r1, [pc, #188]	; (8001da0 <atan2_approx+0x168>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fe55 	bl	8000994 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe ff5a 	bl	8000ba8 <__aeabi_fmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	492b      	ldr	r1, [pc, #172]	; (8001da4 <atan2_approx+0x16c>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fe4b 	bl	8000994 <__aeabi_fsub>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001d04:	4928      	ldr	r1, [pc, #160]	; (8001da8 <atan2_approx+0x170>)
 8001d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_fmul>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <atan2_approx+0x174>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fe41 	bl	8000998 <__addsf3>
 8001d16:	4603      	mov	r3, r0
 8001d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff44 	bl	8000ba8 <__aeabi_fmul>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fe36 	bl	8000998 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7fe ffed 	bl	8000d10 <__aeabi_fdiv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001d3a:	6a39      	ldr	r1, [r7, #32]
 8001d3c:	69f8      	ldr	r0, [r7, #28]
 8001d3e:	f7ff f8ef 	bl	8000f20 <__aeabi_fcmpgt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <atan2_approx+0x11c>
 8001d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <atan2_approx+0x178>)
 8001d4c:	f7fe fe22 	bl	8000994 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f7ff f8c3 	bl	8000ee4 <__aeabi_fcmplt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <atan2_approx+0x138>
 8001d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <atan2_approx+0x17c>)
 8001d68:	f7fe fe14 	bl	8000994 <__aeabi_fsub>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001d70:	f04f 0100 	mov.w	r1, #0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff f8b5 	bl	8000ee4 <__aeabi_fcmplt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <atan2_approx+0x150>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    return res;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	372c      	adds	r7, #44	; 0x2c
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	3d4e0939 	.word	0x3d4e0939
 8001d98:	3e9eb5e3 	.word	0x3e9eb5e3
 8001d9c:	3e16fa88 	.word	0x3e16fa88
 8001da0:	3f7ffe45 	.word	0x3f7ffe45
 8001da4:	34a8dfa7 	.word	0x34a8dfa7
 8001da8:	3f24fb99 	.word	0x3f24fb99
 8001dac:	3e16a269 	.word	0x3e16a269
 8001db0:	3fc90fdb 	.word	0x3fc90fdb
 8001db4:	40490fdb 	.word	0x40490fdb

08001db8 <pt1FilterApply>:
    float RC = 1 / (2 * M_PIf * f_cut);
    return dT / (RC + dT);
}

static inline float pt1FilterApply( float input,float f_cut,float dT)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	static float kk;
	float RC = 1.0f / (2 *M_PIf * f_cut);
 8001dc4:	4919      	ldr	r1, [pc, #100]	; (8001e2c <pt1FilterApply+0x74>)
 8001dc6:	68b8      	ldr	r0, [r7, #8]
 8001dc8:	f7fe feee 	bl	8000ba8 <__aeabi_fmul>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001dd4:	f7fe ff9c 	bl	8000d10 <__aeabi_fdiv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	617b      	str	r3, [r7, #20]
    float gain_k =(float)dT / (RC + dT);
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7fe fdda 	bl	8000998 <__addsf3>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7fe ff91 	bl	8000d10 <__aeabi_fdiv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]
    kk = kk + gain_k*(input - kk);
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <pt1FilterApply+0x78>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7fe fdcb 	bl	8000994 <__aeabi_fsub>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fed0 	bl	8000ba8 <__aeabi_fmul>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <pt1FilterApply+0x78>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f7fe fdc0 	bl	8000998 <__addsf3>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <pt1FilterApply+0x78>)
 8001e1e:	601a      	str	r2, [r3, #0]
    return kk;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <pt1FilterApply+0x78>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40c90fdb 	.word	0x40c90fdb
 8001e30:	20000258 	.word	0x20000258
 8001e34:	00000000 	.word	0x00000000

08001e38 <pidCalcutate>:


static float error = 0;
static float p_fbcontrol=0;
static float P,I,D;
float pidCalcutate(pid_gain_t gain,float fbcontrol,float control,uint16_t dt){
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	1d3c      	adds	r4, r7, #4
 8001e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e44:	603b      	str	r3, [r7, #0]

    error =  fbcontrol - control;
 8001e46:	6a39      	ldr	r1, [r7, #32]
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7fe fda3 	bl	8000994 <__aeabi_fsub>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <pidCalcutate+0x180>)
 8001e54:	601a      	str	r2, [r3, #0]
    P  =  error*gain.kp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <pidCalcutate+0x180>)
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fea2 	bl	8000ba8 <__aeabi_fmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <pidCalcutate+0x184>)
 8001e6a:	601a      	str	r2, [r3, #0]

    if(dt==0)return 0.0f;
 8001e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <pidCalcutate+0x40>
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e096      	b.n	8001fa6 <pidCalcutate+0x16e>
    I +=  error*gain.ki*NS_TO_SEC(dt);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4a4f      	ldr	r2, [pc, #316]	; (8001fb8 <pidCalcutate+0x180>)
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fe91 	bl	8000ba8 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461c      	mov	r4, r3
 8001e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fab1 	bl	80003f4 <__aeabi_i2d>
 8001e92:	a347      	add	r3, pc, #284	; (adr r3, 8001fb0 <pidCalcutate+0x178>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fb16 	bl	80004c8 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fd22 	bl	80008ec <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7fe fe7b 	bl	8000ba8 <__aeabi_fmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <pidCalcutate+0x188>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7fe fd6b 	bl	8000998 <__addsf3>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <pidCalcutate+0x188>)
 8001ec8:	601a      	str	r2, [r3, #0]
    if(I > MAX_I)I= MAX_I;
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <pidCalcutate+0x188>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	493d      	ldr	r1, [pc, #244]	; (8001fc4 <pidCalcutate+0x18c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f825 	bl	8000f20 <__aeabi_fcmpgt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <pidCalcutate+0xac>
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <pidCalcutate+0x188>)
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <pidCalcutate+0x18c>)
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e00b      	b.n	8001efc <pidCalcutate+0xc4>
    else if(I< -MAX_I)I=-MAX_I;
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <pidCalcutate+0x188>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <pidCalcutate+0x190>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fffa 	bl	8000ee4 <__aeabi_fcmplt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <pidCalcutate+0xc4>
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <pidCalcutate+0x188>)
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <pidCalcutate+0x190>)
 8001efa:	601a      	str	r2, [r3, #0]

    D  = (fbcontrol - p_fbcontrol)*gain.kd/NS_TO_SEC(dt);
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <pidCalcutate+0x194>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f7fe fd46 	bl	8000994 <__aeabi_fsub>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f7fe fe49 	bl	8000ba8 <__aeabi_fmul>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461c      	mov	r4, r3
 8001f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fa69 	bl	80003f4 <__aeabi_i2d>
 8001f22:	a323      	add	r3, pc, #140	; (adr r3, 8001fb0 <pidCalcutate+0x178>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	f7fe face 	bl	80004c8 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7fe fcda 	bl	80008ec <__aeabi_d2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7fe fee7 	bl	8000d10 <__aeabi_fdiv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <pidCalcutate+0x198>)
 8001f48:	601a      	str	r2, [r3, #0]
#ifdef APPLY_LPF
    D = pt1FilterApply(D,FCUT_LPF,NS_TO_SEC(dt));
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <pidCalcutate+0x198>)
 8001f4c:	681c      	ldr	r4, [r3, #0]
 8001f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa4f 	bl	80003f4 <__aeabi_i2d>
 8001f56:	a316      	add	r3, pc, #88	; (adr r3, 8001fb0 <pidCalcutate+0x178>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fab4 	bl	80004c8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fcc0 	bl	80008ec <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <pidCalcutate+0x19c>)
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff ff20 	bl	8001db8 <pt1FilterApply>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <pidCalcutate+0x198>)
 8001f7c:	6013      	str	r3, [r2, #0]
#endif

    p_fbcontrol = fbcontrol;
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <pidCalcutate+0x194>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6013      	str	r3, [r2, #0]
    return (P+I+D);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <pidCalcutate+0x184>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <pidCalcutate+0x188>)
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fd02 	bl	8000998 <__addsf3>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <pidCalcutate+0x198>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f7fe fcfa 	bl	8000998 <__addsf3>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001fb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001fb8:	20000244 	.word	0x20000244
 8001fbc:	2000024c 	.word	0x2000024c
 8001fc0:	20000250 	.word	0x20000250
 8001fc4:	43480000 	.word	0x43480000
 8001fc8:	c3480000 	.word	0xc3480000
 8001fcc:	20000248 	.word	0x20000248
 8001fd0:	20000254 	.word	0x20000254
 8001fd4:	42200000 	.word	0x42200000

08001fd8 <mpu_get_gyro>:


/**
 *  get gyro raw value
 */
void mpu_get_gyro(IMU_raw_t *k){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	  k->gyroy=(int16_t)(buffe[2]<<8)|buffe[3];
	  k->gyroz=(int16_t)(buffe[4]<<8)|buffe[5];
#endif
#ifdef MPU_VIA_SPI
	  uint8_t buffe[6];
	  buffe[0]= 0x43;// gyro address
 8001fe0:	2343      	movs	r3, #67	; 0x43
 8001fe2:	723b      	strb	r3, [r7, #8]
	  buffe[0] |=0x80;
 8001fe4:	7a3b      	ldrb	r3, [r7, #8]
 8001fe6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	723b      	strb	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	481a      	ldr	r0, [pc, #104]	; (800205c <mpu_get_gyro+0x84>)
 8001ff4:	f000 fed7 	bl	8002da6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(SPI_PORT,&buffe[0],1,100);
 8001ff8:	f107 0108 	add.w	r1, r7, #8
 8001ffc:	2364      	movs	r3, #100	; 0x64
 8001ffe:	2201      	movs	r2, #1
 8002000:	4817      	ldr	r0, [pc, #92]	; (8002060 <mpu_get_gyro+0x88>)
 8002002:	f001 fcfb 	bl	80039fc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(SPI_PORT,buffe,6,100);
 8002006:	f107 0108 	add.w	r1, r7, #8
 800200a:	2364      	movs	r3, #100	; 0x64
 800200c:	2206      	movs	r2, #6
 800200e:	4814      	ldr	r0, [pc, #80]	; (8002060 <mpu_get_gyro+0x88>)
 8002010:	f001 fe30 	bl	8003c74 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2110      	movs	r1, #16
 8002018:	4810      	ldr	r0, [pc, #64]	; (800205c <mpu_get_gyro+0x84>)
 800201a:	f000 fec4 	bl	8002da6 <HAL_GPIO_WritePin>

	  k->gyrox=(int16_t)(buffe[0]<<8)|buffe[1];
 800201e:	7a3b      	ldrb	r3, [r7, #8]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	b21a      	sxth	r2, r3
 8002024:	7a7b      	ldrb	r3, [r7, #9]
 8002026:	b21b      	sxth	r3, r3
 8002028:	4313      	orrs	r3, r2
 800202a:	b21a      	sxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	80da      	strh	r2, [r3, #6]
	  k->gyroy=(int16_t)(buffe[2]<<8)|buffe[3];
 8002030:	7abb      	ldrb	r3, [r7, #10]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	b21a      	sxth	r2, r3
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21a      	sxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	811a      	strh	r2, [r3, #8]
	  k->gyroz=(int16_t)(buffe[4]<<8)|buffe[5];
 8002042:	7b3b      	ldrb	r3, [r7, #12]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	7b7b      	ldrb	r3, [r7, #13]
 800204a:	b21b      	sxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b21a      	sxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	815a      	strh	r2, [r3, #10]
#endif

	}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40010800 	.word	0x40010800
 8002060:	20000080 	.word	0x20000080

08002064 <mpu_get_acc>:

/**
 *  get acc raw value
 */
void mpu_get_acc(IMU_raw_t *k){
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	  k->accy=(int16_t)(buffe[2]<<8)|buffe[3];
	  k->accz=(int16_t)(buffe[4]<<8)|buffe[5];
#endif
#ifdef MPU_VIA_SPI
	  uint8_t buffe[6];
	  buffe[0] = 0x3b;// acc address
 800206c:	233b      	movs	r3, #59	; 0x3b
 800206e:	723b      	strb	r3, [r7, #8]
	  buffe[0] |=0x80;
 8002070:	7a3b      	ldrb	r3, [r7, #8]
 8002072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002076:	b2db      	uxtb	r3, r3
 8002078:	723b      	strb	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2110      	movs	r1, #16
 800207e:	481a      	ldr	r0, [pc, #104]	; (80020e8 <mpu_get_acc+0x84>)
 8002080:	f000 fe91 	bl	8002da6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(SPI_PORT,buffe,1,100);
 8002084:	f107 0108 	add.w	r1, r7, #8
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	2201      	movs	r2, #1
 800208c:	4817      	ldr	r0, [pc, #92]	; (80020ec <mpu_get_acc+0x88>)
 800208e:	f001 fcb5 	bl	80039fc <HAL_SPI_Transmit>
	  HAL_SPI_Receive(SPI_PORT,buffe,6,100);
 8002092:	f107 0108 	add.w	r1, r7, #8
 8002096:	2364      	movs	r3, #100	; 0x64
 8002098:	2206      	movs	r2, #6
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <mpu_get_acc+0x88>)
 800209c:	f001 fdea 	bl	8003c74 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2110      	movs	r1, #16
 80020a4:	4810      	ldr	r0, [pc, #64]	; (80020e8 <mpu_get_acc+0x84>)
 80020a6:	f000 fe7e 	bl	8002da6 <HAL_GPIO_WritePin>

	  k->accx=(int16_t)buffe[0]<<8|buffe[1];
 80020aa:	7a3b      	ldrb	r3, [r7, #8]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	7a7b      	ldrb	r3, [r7, #9]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	801a      	strh	r2, [r3, #0]
	  k->accy=(int16_t)buffe[2]<<8|buffe[3];
 80020bc:	7abb      	ldrb	r3, [r7, #10]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	805a      	strh	r2, [r3, #2]
	  k->accz=(int16_t)buffe[4]<<8|buffe[5];
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	7b7b      	ldrb	r3, [r7, #13]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21a      	sxth	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	809a      	strh	r2, [r3, #4]
#endif
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010800 	.word	0x40010800
 80020ec:	20000080 	.word	0x20000080

080020f0 <get_offset>:

static void get_offset(){
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
	float pitch_acc,roll_acc;
	IMU_raw_t data;
	static int32_t contan_gyro[3];
	static int32_t contan_acc[3];

	for(uint16_t i=0;i<2000;i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	82fb      	strh	r3, [r7, #22]
 80020fa:	e09d      	b.n	8002238 <get_offset+0x148>
		
        //  acc offset
		mpu_get_acc(&data);
 80020fc:	463b      	mov	r3, r7
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffb0 	bl	8002064 <mpu_get_acc>
		if((data.accx+data.accy+data.accz)!=0)k1++;
 8002104:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002108:	461a      	mov	r2, r3
 800210a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800210e:	4413      	add	r3, r2
 8002110:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <get_offset+0x36>
 800211a:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <get_offset+0x218>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <get_offset+0x218>)
 8002124:	801a      	strh	r2, [r3, #0]

        contan_acc[0] += data.accx;
 8002126:	4b79      	ldr	r3, [pc, #484]	; (800230c <get_offset+0x21c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800212e:	4413      	add	r3, r2
 8002130:	4a76      	ldr	r2, [pc, #472]	; (800230c <get_offset+0x21c>)
 8002132:	6013      	str	r3, [r2, #0]
        contan_acc[1] += data.accy;
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <get_offset+0x21c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800213c:	4413      	add	r3, r2
 800213e:	4a73      	ldr	r2, [pc, #460]	; (800230c <get_offset+0x21c>)
 8002140:	6053      	str	r3, [r2, #4]
        contan_acc[2] += data.accz;
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <get_offset+0x21c>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	4a6f      	ldr	r2, [pc, #444]	; (800230c <get_offset+0x21c>)
 800214e:	6093      	str	r3, [r2, #8]

		roll_acc   =-atan2_approx(data.accx,data.accz)*1/RAD;
 8002150:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fcd3 	bl	8000b00 <__aeabi_i2f>
 800215a:	4604      	mov	r4, r0
 800215c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fccd 	bl	8000b00 <__aeabi_i2f>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff fd64 	bl	8001c38 <atan2_approx>
 8002170:	4603      	mov	r3, r0
 8002172:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002176:	4966      	ldr	r1, [pc, #408]	; (8002310 <get_offset+0x220>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fdc9 	bl	8000d10 <__aeabi_fdiv>
 800217e:	4603      	mov	r3, r0
 8002180:	613b      	str	r3, [r7, #16]
		pitch_acc  = atan2_approx(data.accy,data.accz)*1/RAD;
 8002182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fcba 	bl	8000b00 <__aeabi_i2f>
 800218c:	4604      	mov	r4, r0
 800218e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fcb4 	bl	8000b00 <__aeabi_i2f>
 8002198:	4603      	mov	r3, r0
 800219a:	4619      	mov	r1, r3
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff fd4b 	bl	8001c38 <atan2_approx>
 80021a2:	4603      	mov	r3, r0
 80021a4:	495a      	ldr	r1, [pc, #360]	; (8002310 <get_offset+0x220>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fdb2 	bl	8000d10 <__aeabi_fdiv>
 80021ac:	4603      	mov	r3, r0
 80021ae:	60fb      	str	r3, [r7, #12]
		
		acc_pitch_offset += pitch_acc;
 80021b0:	4b58      	ldr	r3, [pc, #352]	; (8002314 <get_offset+0x224>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fbee 	bl	8000998 <__addsf3>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b54      	ldr	r3, [pc, #336]	; (8002314 <get_offset+0x224>)
 80021c2:	601a      	str	r2, [r3, #0]
		acc_roll_offset  += roll_acc;
 80021c4:	4b54      	ldr	r3, [pc, #336]	; (8002318 <get_offset+0x228>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fbe4 	bl	8000998 <__addsf3>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <get_offset+0x228>)
 80021d6:	601a      	str	r2, [r3, #0]
			
		// gyro offset		
		mpu_get_gyro(&data);
 80021d8:	463b      	mov	r3, r7
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fefc 	bl	8001fd8 <mpu_get_gyro>
		if((data.gyrox+data.gyroy+data.gyroz)!=0)k2++;
 80021e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80021ea:	4413      	add	r3, r2
 80021ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80021f0:	4413      	add	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <get_offset+0x112>
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <get_offset+0x22c>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <get_offset+0x22c>)
 8002200:	801a      	strh	r2, [r3, #0]
		contan_gyro[0] += data.gyrox;
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <get_offset+0x230>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800220a:	4413      	add	r3, r2
 800220c:	4a44      	ldr	r2, [pc, #272]	; (8002320 <get_offset+0x230>)
 800220e:	6013      	str	r3, [r2, #0]
	    contan_gyro[1] += data.gyroy;
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <get_offset+0x230>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002218:	4413      	add	r3, r2
 800221a:	4a41      	ldr	r2, [pc, #260]	; (8002320 <get_offset+0x230>)
 800221c:	6053      	str	r3, [r2, #4]
	    contan_gyro[2] += data.gyroz;
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <get_offset+0x230>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002226:	4413      	add	r3, r2
 8002228:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <get_offset+0x230>)
 800222a:	6093      	str	r3, [r2, #8]
	   // delay_ms(1);
	    HAL_Delay(2);
 800222c:	2002      	movs	r0, #2
 800222e:	f000 faed 	bl	800280c <HAL_Delay>
	for(uint16_t i=0;i<2000;i++){
 8002232:	8afb      	ldrh	r3, [r7, #22]
 8002234:	3301      	adds	r3, #1
 8002236:	82fb      	strh	r3, [r7, #22]
 8002238:	8afb      	ldrh	r3, [r7, #22]
 800223a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800223e:	f4ff af5d 	bcc.w	80020fc <get_offset+0xc>
	}

	if(k1!=0){
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <get_offset+0x218>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03a      	beq.n	80022c0 <get_offset+0x1d0>
	  acc_offs_x = contan_acc[0]/k1;
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <get_offset+0x21c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <get_offset+0x218>)
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	fb93 f3f2 	sdiv	r3, r3, r2
 8002256:	b21a      	sxth	r2, r3
 8002258:	4b32      	ldr	r3, [pc, #200]	; (8002324 <get_offset+0x234>)
 800225a:	801a      	strh	r2, [r3, #0]
      acc_offs_y = contan_acc[1]/k1;
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <get_offset+0x21c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a29      	ldr	r2, [pc, #164]	; (8002308 <get_offset+0x218>)
 8002262:	8812      	ldrh	r2, [r2, #0]
 8002264:	fb93 f3f2 	sdiv	r3, r3, r2
 8002268:	b21a      	sxth	r2, r3
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <get_offset+0x238>)
 800226c:	801a      	strh	r2, [r3, #0]
      acc_offs_z = contan_acc[2]/k1;
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <get_offset+0x21c>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <get_offset+0x218>)
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	fb93 f3f2 	sdiv	r3, r3, r2
 800227a:	b21a      	sxth	r2, r3
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <get_offset+0x23c>)
 800227e:	801a      	strh	r2, [r3, #0]

      acc_pitch_offset /=(float)k1;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <get_offset+0x224>)
 8002282:	681c      	ldr	r4, [r3, #0]
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <get_offset+0x218>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fc35 	bl	8000af8 <__aeabi_ui2f>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	f7fe fd3c 	bl	8000d10 <__aeabi_fdiv>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <get_offset+0x224>)
 800229e:	601a      	str	r2, [r3, #0]
      acc_roll_offset  /=(float)k1;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <get_offset+0x228>)
 80022a2:	681c      	ldr	r4, [r3, #0]
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <get_offset+0x218>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fc25 	bl	8000af8 <__aeabi_ui2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4619      	mov	r1, r3
 80022b2:	4620      	mov	r0, r4
 80022b4:	f7fe fd2c 	bl	8000d10 <__aeabi_fdiv>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <get_offset+0x228>)
 80022be:	601a      	str	r2, [r3, #0]
    }

    if(k2!=0){
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <get_offset+0x22c>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01a      	beq.n	80022fe <get_offset+0x20e>
      gyr_offs_x = contan_gyro[0]/k2;
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <get_offset+0x230>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a13      	ldr	r2, [pc, #76]	; (800231c <get_offset+0x22c>)
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <get_offset+0x240>)
 80022d8:	801a      	strh	r2, [r3, #0]
      gyr_offs_y = contan_gyro[1]/k2;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <get_offset+0x230>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <get_offset+0x22c>)
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <get_offset+0x244>)
 80022ea:	801a      	strh	r2, [r3, #0]
      gyr_offs_z = contan_gyro[2]/k2;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <get_offset+0x230>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <get_offset+0x22c>)
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <get_offset+0x248>)
 80022fc:	801a      	strh	r2, [r3, #0]
    }
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	bf00      	nop
 8002308:	20000284 	.word	0x20000284
 800230c:	20000288 	.word	0x20000288
 8002310:	3c8efa35 	.word	0x3c8efa35
 8002314:	2000025c 	.word	0x2000025c
 8002318:	20000260 	.word	0x20000260
 800231c:	20000294 	.word	0x20000294
 8002320:	20000298 	.word	0x20000298
 8002324:	2000026a 	.word	0x2000026a
 8002328:	2000026c 	.word	0x2000026c
 800232c:	2000026e 	.word	0x2000026e
 8002330:	20000264 	.word	0x20000264
 8002334:	20000266 	.word	0x20000266
 8002338:	20000268 	.word	0x20000268

0800233c <MPU_init>:



void MPU_init(){  
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffer,2,1);
#endif
#ifdef MPU_VIA_SPI
    uint8_t data[2];

	data[0]=0x6b;
 8002342:	236b      	movs	r3, #107	; 0x6b
 8002344:	713b      	strb	r3, [r7, #4]
	data[1]=0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2110      	movs	r1, #16
 800234e:	481e      	ldr	r0, [pc, #120]	; (80023c8 <MPU_init+0x8c>)
 8002350:	f000 fd29 	bl	8002da6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 8002354:	1d39      	adds	r1, r7, #4
 8002356:	2364      	movs	r3, #100	; 0x64
 8002358:	2202      	movs	r2, #2
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <MPU_init+0x90>)
 800235c:	f001 fb4e 	bl	80039fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2110      	movs	r1, #16
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <MPU_init+0x8c>)
 8002366:	f000 fd1e 	bl	8002da6 <HAL_GPIO_WritePin>

	data[0]=0x1b;
 800236a:	231b      	movs	r3, #27
 800236c:	713b      	strb	r3, [r7, #4]
	data[1]=0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2110      	movs	r1, #16
 8002376:	4814      	ldr	r0, [pc, #80]	; (80023c8 <MPU_init+0x8c>)
 8002378:	f000 fd15 	bl	8002da6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 800237c:	1d39      	adds	r1, r7, #4
 800237e:	2364      	movs	r3, #100	; 0x64
 8002380:	2202      	movs	r2, #2
 8002382:	4812      	ldr	r0, [pc, #72]	; (80023cc <MPU_init+0x90>)
 8002384:	f001 fb3a 	bl	80039fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	2110      	movs	r1, #16
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <MPU_init+0x8c>)
 800238e:	f000 fd0a 	bl	8002da6 <HAL_GPIO_WritePin>

	data[0]=0x1c;
 8002392:	231c      	movs	r3, #28
 8002394:	713b      	strb	r3, [r7, #4]
	data[1]=0x00;
 8002396:	2300      	movs	r3, #0
 8002398:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2110      	movs	r1, #16
 800239e:	480a      	ldr	r0, [pc, #40]	; (80023c8 <MPU_init+0x8c>)
 80023a0:	f000 fd01 	bl	8002da6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 80023a4:	1d39      	adds	r1, r7, #4
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	2202      	movs	r2, #2
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <MPU_init+0x90>)
 80023ac:	f001 fb26 	bl	80039fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2110      	movs	r1, #16
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MPU_init+0x8c>)
 80023b6:	f000 fcf6 	bl	8002da6 <HAL_GPIO_WritePin>

#endif
	get_offset();
 80023ba:	f7ff fe99 	bl	80020f0 <get_offset>
	// Finish setup MPU-6050 register
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40010800 	.word	0x40010800
 80023cc:	20000080 	.word	0x20000080

080023d0 <MPU_update>:


float Pitch_acc,Roll_acc;
IMU_raw_t p;
void MPU_update(euler_angle_t *m,uint16_t DT){
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]


	// gyro calibrate
	float lsb2degre =(DT*0.000001)/LSB_gyr;
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f808 	bl	80003f4 <__aeabi_i2d>
 80023e4:	a34e      	add	r3, pc, #312	; (adr r3, 8002520 <MPU_update+0x150>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fe f86d 	bl	80004c8 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	a34c      	add	r3, pc, #304	; (adr r3, 8002528 <MPU_update+0x158>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe f98e 	bl	800071c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fa70 	bl	80008ec <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]

	mpu_get_gyro(&p);
 8002410:	4847      	ldr	r0, [pc, #284]	; (8002530 <MPU_update+0x160>)
 8002412:	f7ff fde1 	bl	8001fd8 <mpu_get_gyro>


    m->pitch += (float)(p.gyrox -gyr_offs_x)*lsb2degre;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681c      	ldr	r4, [r3, #0]
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <MPU_update+0x160>)
 800241c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002420:	461a      	mov	r2, r3
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <MPU_update+0x164>)
 8002424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fb68 	bl	8000b00 <__aeabi_i2f>
 8002430:	4603      	mov	r3, r0
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fbb7 	bl	8000ba8 <__aeabi_fmul>
 800243a:	4603      	mov	r3, r0
 800243c:	4619      	mov	r1, r3
 800243e:	4620      	mov	r0, r4
 8002440:	f7fe faaa 	bl	8000998 <__addsf3>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
    m->roll  += (float)(p.gyroy -gyr_offs_y)*lsb2degre;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685c      	ldr	r4, [r3, #4]
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <MPU_update+0x160>)
 8002452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	4b37      	ldr	r3, [pc, #220]	; (8002538 <MPU_update+0x168>)
 800245a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fb4d 	bl	8000b00 <__aeabi_i2f>
 8002466:	4603      	mov	r3, r0
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fb9c 	bl	8000ba8 <__aeabi_fmul>
 8002470:	4603      	mov	r3, r0
 8002472:	4619      	mov	r1, r3
 8002474:	4620      	mov	r0, r4
 8002476:	f7fe fa8f 	bl	8000998 <__addsf3>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
    m->yaw   = (float)(p.gyroz -gyr_offs_z)*lsb2degre;
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <MPU_update+0x160>)
 8002484:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002488:	461a      	mov	r2, r3
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <MPU_update+0x16c>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fb34 	bl	8000b00 <__aeabi_i2f>
 8002498:	4603      	mov	r3, r0
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fb83 	bl	8000ba8 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	609a      	str	r2, [r3, #8]



	if(m->pitch>180.0f)m->pitch  -= 360.0f;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4924      	ldr	r1, [pc, #144]	; (8002540 <MPU_update+0x170>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fd35 	bl	8000f20 <__aeabi_fcmpgt>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <MPU_update+0x102>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4920      	ldr	r1, [pc, #128]	; (8002544 <MPU_update+0x174>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fa66 	bl	8000994 <__aeabi_fsub>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e012      	b.n	80024f8 <MPU_update+0x128>
	else if(m->pitch<-180.0f)m->pitch += 360.0f;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	491c      	ldr	r1, [pc, #112]	; (8002548 <MPU_update+0x178>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fd03 	bl	8000ee4 <__aeabi_fcmplt>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <MPU_update+0x128>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <MPU_update+0x174>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fa54 	bl	8000998 <__addsf3>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	601a      	str	r2, [r3, #0]
	
    if(m->roll>180.0f)m->roll -= 360.0f;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4910      	ldr	r1, [pc, #64]	; (8002540 <MPU_update+0x170>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fd0e 	bl	8000f20 <__aeabi_fcmpgt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <MPU_update+0x17c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	490d      	ldr	r1, [pc, #52]	; (8002544 <MPU_update+0x174>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fa3f 	bl	8000994 <__aeabi_fsub>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	e028      	b.n	8002572 <MPU_update+0x1a2>
 8002520:	a0b5ed8d 	.word	0xa0b5ed8d
 8002524:	3eb0c6f7 	.word	0x3eb0c6f7
 8002528:	00000000 	.word	0x00000000
 800252c:	40606000 	.word	0x40606000
 8002530:	20000278 	.word	0x20000278
 8002534:	20000264 	.word	0x20000264
 8002538:	20000266 	.word	0x20000266
 800253c:	20000268 	.word	0x20000268
 8002540:	43340000 	.word	0x43340000
 8002544:	43b40000 	.word	0x43b40000
 8002548:	c3340000 	.word	0xc3340000
    else if(m->roll<-180.0f)m->roll += 360.0f;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4973      	ldr	r1, [pc, #460]	; (8002720 <MPU_update+0x350>)
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fcc6 	bl	8000ee4 <__aeabi_fcmplt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <MPU_update+0x1a2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4970      	ldr	r1, [pc, #448]	; (8002724 <MPU_update+0x354>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fa17 	bl	8000998 <__addsf3>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]
	
	//if(m->yaw>360.0f)m->yaw  -= 360.0f;
	//else if(m->yaw<0.0f)m->yaw  += 360.0f;

	m->pitch += m->roll   * sin_approx((p.gyroz -gyr_offs_z)*lsb2degre*RAD);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685c      	ldr	r4, [r3, #4]
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <MPU_update+0x358>)
 8002578:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800257c:	461a      	mov	r2, r3
 800257e:	4b6b      	ldr	r3, [pc, #428]	; (800272c <MPU_update+0x35c>)
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe faba 	bl	8000b00 <__aeabi_i2f>
 800258c:	4603      	mov	r3, r0
 800258e:	68f9      	ldr	r1, [r7, #12]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fb09 	bl	8000ba8 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	4965      	ldr	r1, [pc, #404]	; (8002730 <MPU_update+0x360>)
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fb04 	bl	8000ba8 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff faac 	bl	8001b00 <sin_approx>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4619      	mov	r1, r3
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7fe fafb 	bl	8000ba8 <__aeabi_fmul>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7fe f9eb 	bl	8000998 <__addsf3>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
	m->roll  -= m->pitch  * sin_approx((p.gyroz -gyr_offs_z)*lsb2degre*RAD);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681c      	ldr	r4, [r3, #0]
 80025ce:	4b56      	ldr	r3, [pc, #344]	; (8002728 <MPU_update+0x358>)
 80025d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b55      	ldr	r3, [pc, #340]	; (800272c <MPU_update+0x35c>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fa8e 	bl	8000b00 <__aeabi_i2f>
 80025e4:	4603      	mov	r3, r0
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fadd 	bl	8000ba8 <__aeabi_fmul>
 80025ee:	4603      	mov	r3, r0
 80025f0:	494f      	ldr	r1, [pc, #316]	; (8002730 <MPU_update+0x360>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fad8 	bl	8000ba8 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fa80 	bl	8001b00 <sin_approx>
 8002600:	4603      	mov	r3, r0
 8002602:	4619      	mov	r1, r3
 8002604:	4620      	mov	r0, r4
 8002606:	f7fe facf 	bl	8000ba8 <__aeabi_fmul>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f9bd 	bl	8000994 <__aeabi_fsub>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]

    //  acc calibrate
	mpu_get_acc(&p);
 8002622:	4841      	ldr	r0, [pc, #260]	; (8002728 <MPU_update+0x358>)
 8002624:	f7ff fd1e 	bl	8002064 <mpu_get_acc>
	Roll_acc   =(-atan2_approx((float)p.accx,(float)p.accz)*1/RAD - acc_roll_offset);
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <MPU_update+0x358>)
 800262a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fa66 	bl	8000b00 <__aeabi_i2f>
 8002634:	4604      	mov	r4, r0
 8002636:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <MPU_update+0x358>)
 8002638:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fa5f 	bl	8000b00 <__aeabi_i2f>
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff faf6 	bl	8001c38 <atan2_approx>
 800264c:	4603      	mov	r3, r0
 800264e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002652:	4937      	ldr	r1, [pc, #220]	; (8002730 <MPU_update+0x360>)
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb5b 	bl	8000d10 <__aeabi_fdiv>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <MPU_update+0x364>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7fe f995 	bl	8000994 <__aeabi_fsub>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <MPU_update+0x368>)
 8002670:	601a      	str	r2, [r3, #0]
	Pitch_acc  = (atan2_approx((float)p.accy,(float)p.accz)*1/RAD - acc_pitch_offset);
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <MPU_update+0x358>)
 8002674:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fa41 	bl	8000b00 <__aeabi_i2f>
 800267e:	4604      	mov	r4, r0
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <MPU_update+0x358>)
 8002682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fa3a 	bl	8000b00 <__aeabi_i2f>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fad1 	bl	8001c38 <atan2_approx>
 8002696:	4603      	mov	r3, r0
 8002698:	4925      	ldr	r1, [pc, #148]	; (8002730 <MPU_update+0x360>)
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb38 	bl	8000d10 <__aeabi_fdiv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <MPU_update+0x36c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f7fe f972 	bl	8000994 <__aeabi_fsub>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MPU_update+0x370>)
 80026b6:	601a      	str	r2, [r3, #0]


#endif

#ifndef USE_LPF_1_ODER_ACC
	m->pitch +=GAIN*(Pitch_acc-m->pitch);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681c      	ldr	r4, [r3, #0]
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MPU_update+0x370>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7fe f964 	bl	8000994 <__aeabi_fsub>
 80026cc:	4603      	mov	r3, r0
 80026ce:	491d      	ldr	r1, [pc, #116]	; (8002744 <MPU_update+0x374>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fa69 	bl	8000ba8 <__aeabi_fmul>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4619      	mov	r1, r3
 80026da:	4620      	mov	r0, r4
 80026dc:	f7fe f95c 	bl	8000998 <__addsf3>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	601a      	str	r2, [r3, #0]
	m->roll  +=GAIN*(Roll_acc-m->roll);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685c      	ldr	r4, [r3, #4]
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <MPU_update+0x368>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7fe f94c 	bl	8000994 <__aeabi_fsub>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4911      	ldr	r1, [pc, #68]	; (8002744 <MPU_update+0x374>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fa51 	bl	8000ba8 <__aeabi_fmul>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe f944 	bl	8000998 <__addsf3>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]
     yy = p.accy- acc_offs_y;
	 xc = xx*cos_approx(m->roll*RAD) + yy*sin_approx(m->roll*RAD)*sin_approx(m->pitch*RAD) +p.accz*sin_approx(m->roll*RAD)*cos_approx(m->pitch*RAD);
     yc = yy*cos_approx(m->pitch*RAD) - p.accz*sin_approx(m->pitch*RAD);
	 */

}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bd90      	pop	{r4, r7, pc}
 8002720:	c3340000 	.word	0xc3340000
 8002724:	43b40000 	.word	0x43b40000
 8002728:	20000278 	.word	0x20000278
 800272c:	20000268 	.word	0x20000268
 8002730:	3c8efa35 	.word	0x3c8efa35
 8002734:	20000260 	.word	0x20000260
 8002738:	20000274 	.word	0x20000274
 800273c:	2000025c 	.word	0x2000025c
 8002740:	20000270 	.word	0x20000270
 8002744:	3a83126f 	.word	0x3a83126f

08002748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_Init+0x28>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_Init+0x28>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f947 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f808 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7fe fe7a 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f95f 	bl	8002a56 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f000 f927 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000000 	.word	0x20000000
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_IncTick+0x1c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x20>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <HAL_IncTick+0x20>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	2000000c 	.word	0x2000000c
 80027f4:	200002a4 	.word	0x200002a4

080027f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_GetTick+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	200002a4 	.word	0x200002a4

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fff0 	bl	80027f8 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffe0 	bl	80027f8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000000c 	.word	0x2000000c

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4906      	ldr	r1, [pc, #24]	; (80028ec <__NVIC_EnableIRQ+0x34>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100

080028f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	db0a      	blt.n	800291a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	490c      	ldr	r1, [pc, #48]	; (800293c <__NVIC_SetPriority+0x4c>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	440b      	add	r3, r1
 8002914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002918:	e00a      	b.n	8002930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <__NVIC_SetPriority+0x50>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	3b04      	subs	r3, #4
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	440b      	add	r3, r1
 800292e:	761a      	strb	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f1c3 0307 	rsb	r3, r3, #7
 800295e:	2b04      	cmp	r3, #4
 8002960:	bf28      	it	cs
 8002962:	2304      	movcs	r3, #4
 8002964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3304      	adds	r3, #4
 800296a:	2b06      	cmp	r3, #6
 800296c:	d902      	bls.n	8002974 <NVIC_EncodePriority+0x30>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3b03      	subs	r3, #3
 8002972:	e000      	b.n	8002976 <NVIC_EncodePriority+0x32>
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43d9      	mvns	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	4313      	orrs	r3, r2
         );
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff90 	bl	80028f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff2d 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff42 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff90 	bl	8002944 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5f 	bl	80028f0 <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff35 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e169      	b.n	8002d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a84:	2201      	movs	r2, #1
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f040 8158 	bne.w	8002d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a9a      	ldr	r2, [pc, #616]	; (8002d10 <HAL_GPIO_Init+0x2a0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d05e      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
 8002aac:	4a98      	ldr	r2, [pc, #608]	; (8002d10 <HAL_GPIO_Init+0x2a0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d875      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002ab2:	4a98      	ldr	r2, [pc, #608]	; (8002d14 <HAL_GPIO_Init+0x2a4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d058      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
 8002ab8:	4a96      	ldr	r2, [pc, #600]	; (8002d14 <HAL_GPIO_Init+0x2a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d86f      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002abe:	4a96      	ldr	r2, [pc, #600]	; (8002d18 <HAL_GPIO_Init+0x2a8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d052      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
 8002ac4:	4a94      	ldr	r2, [pc, #592]	; (8002d18 <HAL_GPIO_Init+0x2a8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d869      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002aca:	4a94      	ldr	r2, [pc, #592]	; (8002d1c <HAL_GPIO_Init+0x2ac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d04c      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
 8002ad0:	4a92      	ldr	r2, [pc, #584]	; (8002d1c <HAL_GPIO_Init+0x2ac>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d863      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002ad6:	4a92      	ldr	r2, [pc, #584]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d046      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
 8002adc:	4a90      	ldr	r2, [pc, #576]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d85d      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002ae2:	2b12      	cmp	r3, #18
 8002ae4:	d82a      	bhi.n	8002b3c <HAL_GPIO_Init+0xcc>
 8002ae6:	2b12      	cmp	r3, #18
 8002ae8:	d859      	bhi.n	8002b9e <HAL_GPIO_Init+0x12e>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <HAL_GPIO_Init+0x80>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b45 	.word	0x08002b45
 8002af8:	08002b57 	.word	0x08002b57
 8002afc:	08002b99 	.word	0x08002b99
 8002b00:	08002b9f 	.word	0x08002b9f
 8002b04:	08002b9f 	.word	0x08002b9f
 8002b08:	08002b9f 	.word	0x08002b9f
 8002b0c:	08002b9f 	.word	0x08002b9f
 8002b10:	08002b9f 	.word	0x08002b9f
 8002b14:	08002b9f 	.word	0x08002b9f
 8002b18:	08002b9f 	.word	0x08002b9f
 8002b1c:	08002b9f 	.word	0x08002b9f
 8002b20:	08002b9f 	.word	0x08002b9f
 8002b24:	08002b9f 	.word	0x08002b9f
 8002b28:	08002b9f 	.word	0x08002b9f
 8002b2c:	08002b9f 	.word	0x08002b9f
 8002b30:	08002b9f 	.word	0x08002b9f
 8002b34:	08002b4d 	.word	0x08002b4d
 8002b38:	08002b61 	.word	0x08002b61
 8002b3c:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_GPIO_Init+0x2b4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b42:	e02c      	b.n	8002b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	623b      	str	r3, [r7, #32]
          break;
 8002b4a:	e029      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	3304      	adds	r3, #4
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	e024      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	623b      	str	r3, [r7, #32]
          break;
 8002b5e:	e01f      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	330c      	adds	r3, #12
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e01a      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b72:	2304      	movs	r3, #4
 8002b74:	623b      	str	r3, [r7, #32]
          break;
 8002b76:	e013      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b80:	2308      	movs	r3, #8
 8002b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	611a      	str	r2, [r3, #16]
          break;
 8002b8a:	e009      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	615a      	str	r2, [r3, #20]
          break;
 8002b96:	e003      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
          break;
 8002b9c:	e000      	b.n	8002ba0 <HAL_GPIO_Init+0x130>
          break;
 8002b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2bff      	cmp	r3, #255	; 0xff
 8002ba4:	d801      	bhi.n	8002baa <HAL_GPIO_Init+0x13a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	e001      	b.n	8002bae <HAL_GPIO_Init+0x13e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2bff      	cmp	r3, #255	; 0xff
 8002bb4:	d802      	bhi.n	8002bbc <HAL_GPIO_Init+0x14c>
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	e002      	b.n	8002bc2 <HAL_GPIO_Init+0x152>
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	3b08      	subs	r3, #8
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	210f      	movs	r1, #15
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80b1 	beq.w	8002d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_GPIO_Init+0x2b8>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_GPIO_Init+0x2b8>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_GPIO_Init+0x2b8>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c08:	4a48      	ldr	r2, [pc, #288]	; (8002d2c <HAL_GPIO_Init+0x2bc>)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <HAL_GPIO_Init+0x2c0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <HAL_GPIO_Init+0x1ec>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <HAL_GPIO_Init+0x2c4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00d      	beq.n	8002c58 <HAL_GPIO_Init+0x1e8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <HAL_GPIO_Init+0x2c8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <HAL_GPIO_Init+0x1e4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <HAL_GPIO_Init+0x2cc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_GPIO_Init+0x1e0>
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <HAL_GPIO_Init+0x1ee>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e004      	b.n	8002c5e <HAL_GPIO_Init+0x1ee>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_Init+0x1ee>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_GPIO_Init+0x1ee>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	4093      	lsls	r3, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c6e:	492f      	ldr	r1, [pc, #188]	; (8002d2c <HAL_GPIO_Init+0x2bc>)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	492c      	ldr	r1, [pc, #176]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4928      	ldr	r1, [pc, #160]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4922      	ldr	r1, [pc, #136]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	491e      	ldr	r1, [pc, #120]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4918      	ldr	r1, [pc, #96]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	4914      	ldr	r1, [pc, #80]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d021      	beq.n	8002d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	490e      	ldr	r1, [pc, #56]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
 8002d0c:	e021      	b.n	8002d52 <HAL_GPIO_Init+0x2e2>
 8002d0e:	bf00      	nop
 8002d10:	10320000 	.word	0x10320000
 8002d14:	10310000 	.word	0x10310000
 8002d18:	10220000 	.word	0x10220000
 8002d1c:	10210000 	.word	0x10210000
 8002d20:	10120000 	.word	0x10120000
 8002d24:	10110000 	.word	0x10110000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40010800 	.word	0x40010800
 8002d34:	40010c00 	.word	0x40010c00
 8002d38:	40011000 	.word	0x40011000
 8002d3c:	40011400 	.word	0x40011400
 8002d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	4909      	ldr	r1, [pc, #36]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	3301      	adds	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f47f ae8e 	bne.w	8002a84 <HAL_GPIO_Init+0x14>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	372c      	adds	r7, #44	; 0x2c
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40010400 	.word	0x40010400

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	611a      	str	r2, [r3, #16]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de8:	887a      	ldrh	r2, [r7, #2]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	041a      	lsls	r2, r3, #16
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	400b      	ands	r3, r1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	611a      	str	r2, [r3, #16]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fe58 	bl	8001adc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e12b      	b.n	80030a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f976 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e9c:	f000 fce4 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8002ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a81      	ldr	r2, [pc, #516]	; (80030ac <HAL_I2C_Init+0x274>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d807      	bhi.n	8002ebc <HAL_I2C_Init+0x84>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a80      	ldr	r2, [pc, #512]	; (80030b0 <HAL_I2C_Init+0x278>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e006      	b.n	8002eca <HAL_I2C_Init+0x92>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a7d      	ldr	r2, [pc, #500]	; (80030b4 <HAL_I2C_Init+0x27c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0e7      	b.n	80030a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a78      	ldr	r2, [pc, #480]	; (80030b8 <HAL_I2C_Init+0x280>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0c9b      	lsrs	r3, r3, #18
 8002edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <HAL_I2C_Init+0x274>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d802      	bhi.n	8002f0c <HAL_I2C_Init+0xd4>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	e009      	b.n	8002f20 <HAL_I2C_Init+0xe8>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_I2C_Init+0x284>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	3301      	adds	r3, #1
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	495c      	ldr	r1, [pc, #368]	; (80030ac <HAL_I2C_Init+0x274>)
 8002f3c:	428b      	cmp	r3, r1
 8002f3e:	d819      	bhi.n	8002f74 <HAL_I2C_Init+0x13c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e59      	subs	r1, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4e:	1c59      	adds	r1, r3, #1
 8002f50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f54:	400b      	ands	r3, r1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_I2C_Init+0x138>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1e59      	subs	r1, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	e051      	b.n	8003014 <HAL_I2C_Init+0x1dc>
 8002f70:	2304      	movs	r3, #4
 8002f72:	e04f      	b.n	8003014 <HAL_I2C_Init+0x1dc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d111      	bne.n	8002fa0 <HAL_I2C_Init+0x168>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e012      	b.n	8002fc6 <HAL_I2C_Init+0x18e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e58      	subs	r0, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	0099      	lsls	r1, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Init+0x196>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e022      	b.n	8003014 <HAL_I2C_Init+0x1dc>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_I2C_Init+0x1bc>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e58      	subs	r0, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	440b      	add	r3, r1
 8002fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff2:	e00f      	b.n	8003014 <HAL_I2C_Init+0x1dc>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	0099      	lsls	r1, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	6809      	ldr	r1, [r1, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6911      	ldr	r1, [r2, #16]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68d2      	ldr	r2, [r2, #12]
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	000186a0 	.word	0x000186a0
 80030b0:	001e847f 	.word	0x001e847f
 80030b4:	003d08ff 	.word	0x003d08ff
 80030b8:	431bde83 	.word	0x431bde83
 80030bc:	10624dd3 	.word	0x10624dd3

080030c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e272      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8087 	beq.w	80031ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e0:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ec:	4b8f      	ldr	r3, [pc, #572]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d112      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
 80030f8:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b89      	ldr	r3, [pc, #548]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <HAL_RCC_OscConfig+0x12c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e24c      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x76>
 8003128:	4b80      	ldr	r3, [pc, #512]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7f      	ldr	r2, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e02e      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x98>
 800313e:	4b7b      	ldr	r3, [pc, #492]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7a      	ldr	r2, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b78      	ldr	r3, [pc, #480]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a77      	ldr	r2, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0xbc>
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a71      	ldr	r2, [pc, #452]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 800317c:	4b6b      	ldr	r3, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6a      	ldr	r2, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7ff fb2c 	bl	80027f8 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff fb28 	bl	80027f8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e200      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe4>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff fb18 	bl	80027f8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7ff fb14 	bl	80027f8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1ec      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x10c>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d063      	beq.n	80032c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1c0      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4939      	ldr	r1, [pc, #228]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e03a      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_RCC_OscConfig+0x270>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7ff facd 	bl	80027f8 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7ff fac9 	bl	80027f8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1a1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4927      	ldr	r1, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x270>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7ff faac 	bl	80027f8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7ff faa8 	bl	80027f8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e180      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03a      	beq.n	8003344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d019      	beq.n	800330a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x274>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7ff fa8c 	bl	80027f8 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e4:	f7ff fa88 	bl	80027f8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e160      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003302:	2001      	movs	r0, #1
 8003304:	f000 fad8 	bl	80038b8 <RCC_Delay>
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x274>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003310:	f7ff fa72 	bl	80027f8 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003316:	e00f      	b.n	8003338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7ff fa6e 	bl	80027f8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d908      	bls.n	8003338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e146      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	42420000 	.word	0x42420000
 8003334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e9      	bne.n	8003318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a6 	beq.w	800349e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b8b      	ldr	r3, [pc, #556]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4a87      	ldr	r2, [pc, #540]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	61d3      	str	r3, [r2, #28]
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7ff fa2f 	bl	80027f8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7ff fa2b 	bl	80027f8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e103      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b75      	ldr	r3, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x312>
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e02d      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x334>
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a69      	ldr	r2, [pc, #420]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x356>
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a5d      	ldr	r2, [pc, #372]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 8003416:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7ff f9df 	bl	80027f8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7ff f9db 	bl	80027f8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0b1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x37e>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7ff f9c9 	bl	80027f8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7ff f9c5 	bl	80027f8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e09b      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b40      	ldr	r3, [pc, #256]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8087 	beq.w	80035b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d061      	beq.n	8003578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d146      	bne.n	800354a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7ff f999 	bl	80027f8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7ff f995 	bl	80027f8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e06d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4921      	ldr	r1, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a19      	ldr	r1, [r3, #32]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	430b      	orrs	r3, r1
 8003516:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7ff f969 	bl	80027f8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7ff f965 	bl	80027f8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x46a>
 8003548:	e035      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7ff f952 	bl	80027f8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7ff f94e 	bl	80027f8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e026      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x498>
 8003576:	e01e      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e019      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
 800358c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x500>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d0      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4965      	ldr	r1, [pc, #404]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800362a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d040      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e073      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06b      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4936      	ldr	r1, [pc, #216]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7ff f8a0 	bl	80027f8 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7ff f89c 	bl	80027f8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e053      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d210      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4922      	ldr	r1, [pc, #136]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1cc>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1d0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fffe 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40022000 	.word	0x40022000
 8003788:	40021000 	.word	0x40021000
 800378c:	08004df8 	.word	0x08004df8
 8003790:	20000000 	.word	0x20000000
 8003794:	20000008 	.word	0x20000008

08003798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	b490      	push	{r4, r7}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_RCC_GetSysClockFreq+0xac>)
 80037a0:	1d3c      	adds	r4, r7, #4
 80037a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037a8:	f240 2301 	movw	r3, #513	; 0x201
 80037ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x46>
 80037d6:	e02b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 80037da:	623b      	str	r3, [r7, #32]
      break;
 80037dc:	e02b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3328      	adds	r3, #40	; 0x28
 80037e8:	443b      	add	r3, r7
 80037ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0c5b      	lsrs	r3, r3, #17
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	3328      	adds	r3, #40	; 0x28
 8003806:	443b      	add	r3, r7
 8003808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800380c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4a0e      	ldr	r2, [pc, #56]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003812:	fb03 f202 	mul.w	r2, r3, r2
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e004      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	623b      	str	r3, [r7, #32]
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003832:	623b      	str	r3, [r7, #32]
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6a3b      	ldr	r3, [r7, #32]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bc90      	pop	{r4, r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	08004de8 	.word	0x08004de8
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	003d0900 	.word	0x003d0900

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b02      	ldr	r3, [pc, #8]	; (8003864 <HAL_RCC_GetHCLKFreq+0x10>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff2 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08004e08 	.word	0x08004e08

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffde 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0adb      	lsrs	r3, r3, #11
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08004e08 	.word	0x08004e08

080038b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <RCC_Delay+0x34>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <RCC_Delay+0x38>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0a5b      	lsrs	r3, r3, #9
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038d4:	bf00      	nop
  }
  while (Delay --);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e5a      	subs	r2, r3, #1
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <RCC_Delay+0x1c>
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	20000000 	.word	0x20000000
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e076      	b.n	80039f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d009      	beq.n	800392c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
 800391e:	e005      	b.n	800392c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fd0e 	bl	8001368 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	ea42 0103 	orr.w	r1, r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	0c1a      	lsrs	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f002 0204 	and.w	r2, r2, #4
 80039d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_SPI_Transmit+0x22>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e126      	b.n	8003c6c <HAL_SPI_Transmit+0x270>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a26:	f7fe fee7 	bl	80027f8 <HAL_GetTick>
 8003a2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a40:	e10b      	b.n	8003c5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_Transmit+0x52>
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a52:	e102      	b.n	8003c5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2203      	movs	r2, #3
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9a:	d10f      	bne.n	8003abc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d007      	beq.n	8003ada <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d14b      	bne.n	8003b7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_SPI_Transmit+0xf6>
 8003aec:	8afb      	ldrh	r3, [r7, #22]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d13e      	bne.n	8003b70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b16:	e02b      	b.n	8003b70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d112      	bne.n	8003b4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b4a:	e011      	b.n	8003b70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4c:	f7fe fe54 	bl	80027f8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d803      	bhi.n	8003b64 <HAL_SPI_Transmit+0x168>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Transmit+0x16e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b6e:	e074      	b.n	8003c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ce      	bne.n	8003b18 <HAL_SPI_Transmit+0x11c>
 8003b7a:	e04c      	b.n	8003c16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Transmit+0x18e>
 8003b84:	8afb      	ldrh	r3, [r7, #22]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d140      	bne.n	8003c0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bb0:	e02c      	b.n	8003c0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d113      	bne.n	8003be8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003be6:	e011      	b.n	8003c0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be8:	f7fe fe06 	bl	80027f8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d803      	bhi.n	8003c00 <HAL_SPI_Transmit+0x204>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d102      	bne.n	8003c06 <HAL_SPI_Transmit+0x20a>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c0a:	e026      	b.n	8003c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cd      	bne.n	8003bb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fbb8 	bl	8004390 <SPI_EndRxTxTransaction>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e000      	b.n	8003c5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c90:	d112      	bne.n	8003cb8 <HAL_SPI_Receive+0x44>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8f1 	bl	8003e96 <HAL_SPI_TransmitReceive>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	e0ea      	b.n	8003e8e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Receive+0x52>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0e3      	b.n	8003e8e <HAL_SPI_Receive+0x21a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cce:	f7fe fd93 	bl	80027f8 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ce4:	e0ca      	b.n	8003e7c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SPI_Receive+0x7e>
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cf6:	e0c1      	b.n	8003e7c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	d10f      	bne.n	8003d60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d007      	beq.n	8003d7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d162      	bne.n	8003e4c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d86:	e02e      	b.n	8003de6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d115      	bne.n	8003dc2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f103 020c 	add.w	r2, r3, #12
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc0:	e011      	b.n	8003de6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc2:	f7fe fd19 	bl	80027f8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d803      	bhi.n	8003dda <HAL_SPI_Receive+0x166>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d102      	bne.n	8003de0 <HAL_SPI_Receive+0x16c>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003de4:	e04a      	b.n	8003e7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1cb      	bne.n	8003d88 <HAL_SPI_Receive+0x114>
 8003df0:	e031      	b.n	8003e56 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d113      	bne.n	8003e28 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e26:	e011      	b.n	8003e4c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e28:	f7fe fce6 	bl	80027f8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d803      	bhi.n	8003e40 <HAL_SPI_Receive+0x1cc>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d102      	bne.n	8003e46 <HAL_SPI_Receive+0x1d2>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e4a:	e017      	b.n	8003e7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cd      	bne.n	8003df2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa46 	bl	80042ec <SPI_EndRxTransaction>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
 8003e78:	e000      	b.n	8003e7c <HAL_SPI_Receive+0x208>
  }

error :
 8003e7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b08c      	sub	sp, #48	; 0x30
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x26>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e18a      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x33c>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec4:	f7fe fc98 	bl	80027f8 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d00f      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x70>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eec:	d107      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x68>
 8003ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d003      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f04:	e15b      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x82>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x82>
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f1e:	e14e      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d003      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2205      	movs	r2, #5
 8003f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	887a      	ldrh	r2, [r7, #2]
 8003f56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d007      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	d178      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x10a>
 8003f9a:	8b7b      	ldrh	r3, [r7, #26]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d166      	bne.n	800406e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc4:	e053      	b.n	800406e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d11b      	bne.n	800400c <HAL_SPI_TransmitReceive+0x176>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_SPI_TransmitReceive+0x176>
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d113      	bne.n	800400c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	1c9a      	adds	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d119      	bne.n	800404e <HAL_SPI_TransmitReceive+0x1b8>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d014      	beq.n	800404e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	b292      	uxth	r2, r2
 8004030:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800404a:	2301      	movs	r3, #1
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800404e:	f7fe fbd3 	bl	80027f8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405a:	429a      	cmp	r2, r3
 800405c:	d807      	bhi.n	800406e <HAL_SPI_TransmitReceive+0x1d8>
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d003      	beq.n	800406e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800406c:	e0a7      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1a6      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x130>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1a1      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x130>
 8004082:	e07c      	b.n	800417e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x1fc>
 800408c:	8b7b      	ldrh	r3, [r7, #26]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d16b      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b8:	e057      	b.n	800416a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d11c      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x26c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <HAL_SPI_TransmitReceive+0x26c>
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d114      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	7812      	ldrb	r2, [r2, #0]
 80040e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d119      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x2ae>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004140:	2301      	movs	r3, #1
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004144:	f7fe fb58 	bl	80027f8 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004150:	429a      	cmp	r2, r3
 8004152:	d803      	bhi.n	800415c <HAL_SPI_TransmitReceive+0x2c6>
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d102      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x2cc>
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004168:	e029      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1a2      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x224>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d19d      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f904 	bl	8004390 <SPI_EndRxTxTransaction>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800419a:	e010      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	e000      	b.n	80041be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	; 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ec:	f7fe fb04 	bl	80027f8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041fc:	f7fe fafc 	bl	80027f8 <HAL_GetTick>
 8004200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	0d1b      	lsrs	r3, r3, #20
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	e054      	b.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d050      	beq.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800421c:	f7fe faec 	bl	80027f8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	429a      	cmp	r2, r3
 800422a:	d902      	bls.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d13d      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424a:	d111      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d004      	beq.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	d107      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004278:	d10f      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e017      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d19b      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000

080042ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004300:	d111      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d004      	beq.n	8004316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d107      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d117      	bne.n	8004360 <SPI_EndRxTransaction+0x74>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d112      	bne.n	8004360 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	2101      	movs	r1, #1
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff49 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e013      	b.n	8004388 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff36 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e000      	b.n	8004388 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff18 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e000      	b.n	80043c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e041      	b.n	8004462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd f8f2 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 fa70 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e03a      	b.n	80044fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	; (8004504 <HAL_TIM_Base_Start_IT+0x98>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <HAL_TIM_Base_Start_IT+0x9c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <HAL_TIM_Base_Start_IT+0xa0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d111      	bne.n	80044e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d010      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	e007      	b.n	80044f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800

08004510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0202 	mvn.w	r2, #2
 800453c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9b1 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9a4 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f9b3 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0204 	mvn.w	r2, #4
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f987 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f97a 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f989 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0208 	mvn.w	r2, #8
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2204      	movs	r2, #4
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f95d 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f950 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f95f 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2208      	movs	r2, #8
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f933 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f926 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f935 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0201 	mvn.w	r2, #1
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fa08 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d10e      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d107      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa77 	bl	8004bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8f9 	bl	80048de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b20      	cmp	r3, #32
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0220 	mvn.w	r2, #32
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa42 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIM_ConfigClockSource+0x18>
 8004734:	2302      	movs	r3, #2
 8004736:	e0b3      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x180>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004770:	d03e      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004776:	f200 8087 	bhi.w	8004888 <HAL_TIM_ConfigClockSource+0x168>
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	f000 8085 	beq.w	800488c <HAL_TIM_ConfigClockSource+0x16c>
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d87f      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d01a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xa2>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d87b      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d050      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x116>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d877      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 8004798:	2b50      	cmp	r3, #80	; 0x50
 800479a:	d03c      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xf6>
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d873      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d058      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x136>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d86f      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d064      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x156>
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d86b      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d060      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x156>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d867      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x156>
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d05a      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047c0:	e062      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6899      	ldr	r1, [r3, #8]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f000 f966 	bl	8004aa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]
      break;
 80047ee:	e04e      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f000 f94f 	bl	8004aa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004812:	609a      	str	r2, [r3, #8]
      break;
 8004814:	e03b      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f8c6 	bl	80049b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2150      	movs	r1, #80	; 0x50
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f91d 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004834:	e02b      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	f000 f8e4 	bl	8004a10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2160      	movs	r1, #96	; 0x60
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f90d 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004854:	e01b      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f8a6 	bl	80049b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2140      	movs	r1, #64	; 0x40
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f8fd 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004874:	e00b      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 f8f4 	bl	8004a6e <TIM_ITRx_SetConfig>
        break;
 8004886:	e002      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800488c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <TIM_Base_SetConfig+0xb8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0x30>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0x30>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0xbc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0x30>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0xc0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d108      	bne.n	8004932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <TIM_Base_SetConfig+0xb8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <TIM_Base_SetConfig+0x62>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d007      	beq.n	8004952 <TIM_Base_SetConfig+0x62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <TIM_Base_SetConfig+0xbc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_Base_SetConfig+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <TIM_Base_SetConfig+0xc0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <TIM_Base_SetConfig+0xb8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800

080049b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 030a 	bic.w	r3, r3, #10
 80049f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0210 	bic.w	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	031b      	lsls	r3, r3, #12
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e046      	b.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d009      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10c      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e03f      	b.n	8004c52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fd48 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f829 	bl	8004c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c96:	f023 030c 	bic.w	r3, r3, #12
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <UART_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7fe fde4 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	e002      	b.n	8004cd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe fdcc 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <UART_SetConfig+0x118>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	0119      	lsls	r1, r3, #4
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009a      	lsls	r2, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <UART_SetConfig+0x118>)
 8004d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2064      	movs	r0, #100	; 0x64
 8004d12:	fb00 f303 	mul.w	r3, r0, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <UART_SetConfig+0x118>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d28:	4419      	add	r1, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <UART_SetConfig+0x118>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <UART_SetConfig+0x118>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	440a      	add	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40013800 	.word	0x40013800
 8004d74:	51eb851f 	.word	0x51eb851f

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	4d0c      	ldr	r5, [pc, #48]	; (8004db0 <__libc_init_array+0x38>)
 8004d7e:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d80:	1b64      	subs	r4, r4, r5
 8004d82:	10a4      	asrs	r4, r4, #2
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	f000 f822 	bl	8004dd0 <_init>
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	4d0a      	ldr	r5, [pc, #40]	; (8004db8 <__libc_init_array+0x40>)
 8004d90:	4c0a      	ldr	r4, [pc, #40]	; (8004dbc <__libc_init_array+0x44>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08004e10 	.word	0x08004e10
 8004db4:	08004e10 	.word	0x08004e10
 8004db8:	08004e10 	.word	0x08004e10
 8004dbc:	08004e14 	.word	0x08004e14

08004dc0 <memset>:
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4402      	add	r2, r0
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d100      	bne.n	8004dca <memset+0xa>
 8004dc8:	4770      	bx	lr
 8004dca:	f803 1b01 	strb.w	r1, [r3], #1
 8004dce:	e7f9      	b.n	8004dc4 <memset+0x4>

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr
