
mario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004968  08004968  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004968  08004968  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004968  08004968  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  0800497c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  0800497c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d3a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6a  00000000  00000000  00031d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001852e  00000000  00000000  00036c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001522f  00000000  00000000  0004f14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7b5  00000000  00000000  0006437d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3b32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  000f3b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004928 	.word	0x08004928

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004928 	.word	0x08004928

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a41      	ldr	r2, [pc, #260]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a35      	ldr	r2, [pc, #212]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_GPIO_Init+0x120>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	482a      	ldr	r0, [pc, #168]	; (80010a4 <MX_GPIO_Init+0x124>)
 8000ffc:	f001 fc97 	bl	800292e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2118      	movs	r1, #24
 8001004:	4828      	ldr	r0, [pc, #160]	; (80010a8 <MX_GPIO_Init+0x128>)
 8001006:	f001 fc92 	bl	800292e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800100a:	2200      	movs	r2, #0
 800100c:	f241 0178 	movw	r1, #4216	; 0x1078
 8001010:	4826      	ldr	r0, [pc, #152]	; (80010ac <MX_GPIO_Init+0x12c>)
 8001012:	f001 fc8c 	bl	800292e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x124>)
 8001030:	f001 fae2 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_GPIO_Init+0x130>)
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <MX_GPIO_Init+0x124>)
 800104a:	f001 fad5 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800104e:	2318      	movs	r3, #24
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <MX_GPIO_Init+0x128>)
 8001066:	f001 fac7 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800106a:	f241 0378 	movw	r3, #4216	; 0x1078
 800106e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <MX_GPIO_Init+0x12c>)
 8001084:	f001 fab8 	bl	80025f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2028      	movs	r0, #40	; 0x28
 800108e:	f001 fa7c 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f001 fa95 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40010800 	.word	0x40010800
 80010ac:	40010c00 	.word	0x40010c00
 80010b0:	10110000 	.word	0x10110000

080010b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C2_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <MX_I2C2_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C2_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_I2C2_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C2_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_I2C2_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_I2C2_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_I2C2_Init+0x50>)
 80010f2:	f001 fc4d 	bl	8002990 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f8a0 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000002c 	.word	0x2000002c
 8001108:	40005800 	.word	0x40005800
 800110c:	00061a80 	.word	0x00061a80

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a16      	ldr	r2, [pc, #88]	; (8001184 <HAL_I2C_MspInit+0x74>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d124      	bne.n	800117a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_I2C_MspInit+0x78>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_I2C_MspInit+0x78>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_I2C_MspInit+0x78>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001148:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800114c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_I2C_MspInit+0x7c>)
 800115e:	f001 fa4b 	bl	80025f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_I2C_MspInit+0x78>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0x78>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_I2C_MspInit+0x78>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40005800 	.word	0x40005800
 8001188:	40021000 	.word	0x40021000
 800118c:	40010c00 	.word	0x40010c00

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f001 f8c0 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f80d 	bl	80011b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f7ff fef0 	bl	8000f80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011a0:	f000 f9c4 	bl	800152c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80011a4:	f000 f94e 	bl	8001444 <MX_TIM4_Init>
  MX_SPI1_Init();
 80011a8:	f000 f850 	bl	800124c <MX_SPI1_Init>
  MX_I2C2_Init();
 80011ac:	f7ff ff82 	bl	80010b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    main_loop();// inti loop
 80011b0:	f000 fb28 	bl	8001804 <main_loop>
    // ptotototot
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x24>

080011b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b090      	sub	sp, #64	; 0x40
 80011ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	2228      	movs	r2, #40	; 0x28
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fba7 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fd0a 	bl	8002c18 <HAL_RCC_OscConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800120a:	f000 f819 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2102      	movs	r1, #2
 8001228:	4618      	mov	r0, r3
 800122a:	f001 ff77 	bl	800311c <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001234:	f000 f804 	bl	8001240 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3740      	adds	r7, #64	; 0x40
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001280:	2228      	movs	r2, #40	; 0x28
 8001282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001298:	220a      	movs	r2, #10
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI1_Init+0x64>)
 800129e:	f002 f8d5 	bl	800344c <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a8:	f7ff ffca 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000080 	.word	0x20000080
 80012b4:	40013000 	.word	0x40013000

080012b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d12f      	bne.n	8001338 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <HAL_SPI_MspInit+0x90>)
 800131c:	f001 f96c 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_SPI_MspInit+0x90>)
 8001334:	f001 f960 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_MspInit+0x5c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_MspInit+0x5c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x60>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_MspInit+0x60>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>
	...

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,0);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	4802      	ldr	r0, [pc, #8]	; (80013cc <HardFault_Handler+0x14>)
 80013c4:	f001 fab3 	bl	800292e <HAL_GPIO_WritePin>
 80013c8:	e7f8      	b.n	80013bc <HardFault_Handler+0x4>
 80013ca:	bf00      	nop
 80013cc:	40011000 	.word	0x40011000

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140a:	f000 ffcb 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM4_IRQHandler+0x10>)
 800141a:	f002 fe25 	bl	8004068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000d8 	.word	0x200000d8

08001428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800142c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001430:	f001 fa96 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM4_Init+0x94>)
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <MX_TIM4_Init+0x98>)
 8001464:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM4_Init+0x94>)
 8001468:	2247      	movs	r2, #71	; 0x47
 800146a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM4_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM4_Init+0x94>)
 8001474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001478:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_TIM4_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM4_Init+0x94>)
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_TIM4_Init+0x94>)
 8001488:	f002 fd4c 	bl	8003f24 <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001492:	f7ff fed5 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM4_Init+0x94>)
 80014a4:	f002 fee8 	bl	8004278 <HAL_TIM_ConfigClockSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f7ff fec7 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM4_Init+0x94>)
 80014c0:	f003 f8ba 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014ca:	f7ff feb9 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000d8 	.word	0x200000d8
 80014dc:	40000800 	.word	0x40000800

080014e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d113      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_TIM_Base_MspInit+0x48>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <HAL_TIM_Base_MspInit+0x48>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_TIM_Base_MspInit+0x48>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201e      	movs	r0, #30
 8001510:	f001 f83b 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001514:	201e      	movs	r0, #30
 8001516:	f001 f854 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40000800 	.word	0x40000800
 8001528:	40021000 	.word	0x40021000

0800152c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART1_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001564:	f003 f8d8 	bl	8004718 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f7ff fe67 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000120 	.word	0x20000120
 800157c:	40013800 	.word	0x40013800

08001580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_UART_MspInit+0x8c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d131      	bne.n	8001604 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <HAL_UART_MspInit+0x94>)
 80015e6:	f001 f807 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_UART_MspInit+0x94>)
 8001600:	f000 fffa 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40013800 	.word	0x40013800
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800

08001618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163e:	f7ff fefb 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 f945 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001646:	f7ff fda3 	bl	8001190 <main>
  bx lr
 800164a:	4770      	bx	lr
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001654:	08004970 	.word	0x08004970
  ldr r2, =_sbss
 8001658:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800165c:	200001fc 	.word	0x200001fc

08001660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_2_IRQHandler>
	...

08001664 <looptime>:
static uint64_t time1,time2;
/*
 * tao vong lap voi chu ki hz
 */
void looptime(uint16_t hz)
{
 8001664:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	4601      	mov	r1, r0
 800166e:	81f9      	strh	r1, [r7, #14]
    do{
   	 time2=micros();
 8001670:	4918      	ldr	r1, [pc, #96]	; (80016d4 <looptime+0x70>)
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001676:	2000      	movs	r0, #0
 8001678:	468a      	mov	sl, r1
 800167a:	4683      	mov	fp, r0
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <looptime+0x74>)
 800167e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001682:	eb1a 0400 	adds.w	r4, sl, r0
 8001686:	603c      	str	r4, [r7, #0]
 8001688:	eb4b 0101 	adc.w	r1, fp, r1
 800168c:	6079      	str	r1, [r7, #4]
 800168e:	4913      	ldr	r1, [pc, #76]	; (80016dc <looptime+0x78>)
 8001690:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001694:	e9c1 4500 	strd	r4, r5, [r1]
     }while((time2-time1)<hz);
 8001698:	4910      	ldr	r1, [pc, #64]	; (80016dc <looptime+0x78>)
 800169a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800169e:	4910      	ldr	r1, [pc, #64]	; (80016e0 <looptime+0x7c>)
 80016a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a4:	1a22      	subs	r2, r4, r0
 80016a6:	eb65 0301 	sbc.w	r3, r5, r1
 80016aa:	89f9      	ldrh	r1, [r7, #14]
 80016ac:	2000      	movs	r0, #0
 80016ae:	4688      	mov	r8, r1
 80016b0:	4681      	mov	r9, r0
 80016b2:	4542      	cmp	r2, r8
 80016b4:	eb73 0109 	sbcs.w	r1, r3, r9
 80016b8:	d3da      	bcc.n	8001670 <looptime+0xc>
    time1=time2;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <looptime+0x78>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <looptime+0x7c>)
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200000d8 	.word	0x200000d8
 80016d8:	20000168 	.word	0x20000168
 80016dc:	20000178 	.word	0x20000178
 80016e0:	20000170 	.word	0x20000170

080016e4 <callBackFuncition>:
}rcChannel_t;

/*brief rc channel reveive
 *Param  chh rcChannel
 */
void callBackFuncition(rcChannel_t *chh){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	static uint8_t start = 0;
	static uint8_t count = 0;
	static uint32_t timeVal,currentTime,prerviTime;
	static uint16_t time;
    /********************/
	if(!start){
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <callBackFuncition+0xfc>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d134      	bne.n	800175e <callBackFuncition+0x7a>
		if(GET_PIN_STATE){
 80016f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f8:	483a      	ldr	r0, [pc, #232]	; (80017e4 <callBackFuncition+0x100>)
 80016fa:	f001 f901 	bl	8002900 <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00a      	beq.n	800171a <callBackFuncition+0x36>
			timeVal=micros();
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <callBackFuncition+0x104>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <callBackFuncition+0x108>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	4613      	mov	r3, r2
 8001712:	440b      	add	r3, r1
 8001714:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <callBackFuncition+0x10c>)
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	e021      	b.n	800175e <callBackFuncition+0x7a>
		  }
		else if(!GET_PIN_STATE){
 800171a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171e:	4831      	ldr	r0, [pc, #196]	; (80017e4 <callBackFuncition+0x100>)
 8001720:	f001 f8ee 	bl	8002900 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <callBackFuncition+0x7a>
		   time=micros()-timeVal;
 800172a:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <callBackFuncition+0x104>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	b299      	uxth	r1, r3
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <callBackFuncition+0x108>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	b293      	uxth	r3, r2
 800173a:	440b      	add	r3, r1
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <callBackFuncition+0x10c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <callBackFuncition+0x110>)
 800174a:	801a      	strh	r2, [r3, #0]
		   if(time>TIME_MARK_START)start=1;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <callBackFuncition+0x110>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	f242 7210 	movw	r2, #10000	; 0x2710
 8001754:	4293      	cmp	r3, r2
 8001756:	d902      	bls.n	800175e <callBackFuncition+0x7a>
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <callBackFuncition+0xfc>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(start && !GET_PIN_STATE){
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <callBackFuncition+0xfc>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d037      	beq.n	80017d6 <callBackFuncition+0xf2>
 8001766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <callBackFuncition+0x100>)
 800176c:	f001 f8c8 	bl	8002900 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d12f      	bne.n	80017d6 <callBackFuncition+0xf2>
		currentTime=micros();
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <callBackFuncition+0x104>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <callBackFuncition+0x108>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	4613      	mov	r3, r2
 8001784:	440b      	add	r3, r1
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <callBackFuncition+0x114>)
 8001788:	6013      	str	r3, [r2, #0]
		if(count>0)chh->ch[count-1]=currentTime-prerviTime;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <callBackFuncition+0x118>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00d      	beq.n	80017ae <callBackFuncition+0xca>
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <callBackFuncition+0x114>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b299      	uxth	r1, r3
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <callBackFuncition+0x11c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <callBackFuncition+0x118>)
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	3a01      	subs	r2, #1
 80017a4:	1acb      	subs	r3, r1, r3
 80017a6:	b299      	uxth	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		prerviTime=currentTime;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <callBackFuncition+0x114>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <callBackFuncition+0x11c>)
 80017b4:	6013      	str	r3, [r2, #0]
		count++;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <callBackFuncition+0x118>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <callBackFuncition+0x118>)
 80017c0:	701a      	strb	r2, [r3, #0]
		if(count > (NUM_OF_CHANNEL + 1) ){
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <callBackFuncition+0x118>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	d905      	bls.n	80017d6 <callBackFuncition+0xf2>
			start =0;
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <callBackFuncition+0xfc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
			count=0;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <callBackFuncition+0x118>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000198 	.word	0x20000198
 80017e4:	40011000 	.word	0x40011000
 80017e8:	200000d8 	.word	0x200000d8
 80017ec:	20000168 	.word	0x20000168
 80017f0:	2000019c 	.word	0x2000019c
 80017f4:	200001a0 	.word	0x200001a0
 80017f8:	200001a4 	.word	0x200001a4
 80017fc:	200001a8 	.word	0x200001a8
 8001800:	200001ac 	.word	0x200001ac

08001804 <main_loop>:

uint16_t moto[6];
euler_angle_t m;
MAG_t t;
rcChannel_t rx;
void main_loop(){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	// int main
	HAL_TIM_Base_Start_IT(&htim4);
 800180a:	480f      	ldr	r0, [pc, #60]	; (8001848 <main_loop+0x44>)
 800180c:	f002 fbda 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
	MPU_init();
 8001810:	f000 fb50 	bl	8001eb4 <MPU_init>

	for(int i=0;i<6;i++){
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	e008      	b.n	800182c <main_loop+0x28>
		rx.ch[i]=1000;
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <main_loop+0x48>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001822:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<6;i++){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b05      	cmp	r3, #5
 8001830:	ddf3      	ble.n	800181a <main_loop+0x16>

	//qmc5883_init();

while(1){

	MPU_update(&m,4000);  //4000 DELTA T
 8001832:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <main_loop+0x4c>)
 8001838:	f000 fb86 	bl	8001f48 <MPU_update>



    //writePWM(moto);
    looptime(4000);
 800183c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001840:	f7ff ff10 	bl	8001664 <looptime>
	MPU_update(&m,4000);  //4000 DELTA T
 8001844:	e7f5      	b.n	8001832 <main_loop+0x2e>
 8001846:	bf00      	nop
 8001848:	200000d8 	.word	0x200000d8
 800184c:	2000018c 	.word	0x2000018c
 8001850:	20000180 	.word	0x20000180

08001854 <HAL_TIM_PeriodElapsedCallback>:


/*-------------ISR HANDLER----------------------*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001854:	b4b0      	push	{r4, r5, r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d10a      	bne.n	800187a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		callBack();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800186e:	1854      	adds	r4, r2, r1
 8001870:	f143 0500 	adc.w	r5, r3, #0
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001876:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bcb0      	pop	{r4, r5, r7}
 8001882:	4770      	bx	lr
 8001884:	200000d8 	.word	0x200000d8
 8001888:	20000168 	.word	0x20000168

0800188c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14) // If The INT Source Is EXTI 14
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	callBackFuncition(&rx);
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <HAL_GPIO_EXTI_Callback+0x20>)
 80018a0:	f7ff ff20 	bl	80016e4 <callBackFuncition>
    }

}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000018c 	.word	0x2000018c

080018b0 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fb3b 	bl	8000f34 <__aeabi_f2iz>
 80018be:	4603      	mov	r3, r0
 80018c0:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f113 0f20 	cmn.w	r3, #32
 80018c8:	db02      	blt.n	80018d0 <sin_approx+0x20>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	dd08      	ble.n	80018e2 <sin_approx+0x32>
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e074      	b.n	80019c0 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 80018d6:	493c      	ldr	r1, [pc, #240]	; (80019c8 <sin_approx+0x118>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff f85b 	bl	8000994 <__aeabi_fsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	493a      	ldr	r1, [pc, #232]	; (80019cc <sin_approx+0x11c>)
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fb1b 	bl	8000f20 <__aeabi_fcmpgt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f2      	bne.n	80018d6 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 80018f0:	e005      	b.n	80018fe <sin_approx+0x4e>
 80018f2:	4935      	ldr	r1, [pc, #212]	; (80019c8 <sin_approx+0x118>)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff f84f 	bl	8000998 <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4934      	ldr	r1, [pc, #208]	; (80019d0 <sin_approx+0x120>)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff faef 	bl	8000ee4 <__aeabi_fcmplt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800190c:	4931      	ldr	r1, [pc, #196]	; (80019d4 <sin_approx+0x124>)
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fb06 	bl	8000f20 <__aeabi_fcmpgt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <sin_approx+0x82>
 800191a:	492e      	ldr	r1, [pc, #184]	; (80019d4 <sin_approx+0x124>)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f839 	bl	8000994 <__aeabi_fsub>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	482b      	ldr	r0, [pc, #172]	; (80019d4 <sin_approx+0x124>)
 8001928:	f7ff f834 	bl	8000994 <__aeabi_fsub>
 800192c:	4603      	mov	r3, r0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e011      	b.n	8001956 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8001932:	4929      	ldr	r1, [pc, #164]	; (80019d8 <sin_approx+0x128>)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fad5 	bl	8000ee4 <__aeabi_fcmplt>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00a      	beq.n	8001956 <sin_approx+0xa6>
 8001940:	4924      	ldr	r1, [pc, #144]	; (80019d4 <sin_approx+0x124>)
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff f828 	bl	8000998 <__addsf3>
 8001948:	4603      	mov	r3, r0
 800194a:	4619      	mov	r1, r3
 800194c:	4822      	ldr	r0, [pc, #136]	; (80019d8 <sin_approx+0x128>)
 800194e:	f7ff f821 	bl	8000994 <__aeabi_fsub>
 8001952:	4603      	mov	r3, r0
 8001954:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff f925 	bl	8000ba8 <__aeabi_fmul>
 800195e:	4603      	mov	r3, r0
 8001960:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff f91f 	bl	8000ba8 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	461c      	mov	r4, r3
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f7ff f918 	bl	8000ba8 <__aeabi_fmul>
 8001978:	4603      	mov	r3, r0
 800197a:	4918      	ldr	r1, [pc, #96]	; (80019dc <sin_approx+0x12c>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f809 	bl	8000994 <__aeabi_fsub>
 8001982:	4603      	mov	r3, r0
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f90e 	bl	8000ba8 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	4914      	ldr	r1, [pc, #80]	; (80019e0 <sin_approx+0x130>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f801 	bl	8000998 <__addsf3>
 8001996:	4603      	mov	r3, r0
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f904 	bl	8000ba8 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4910      	ldr	r1, [pc, #64]	; (80019e4 <sin_approx+0x134>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fff5 	bl	8000994 <__aeabi_fsub>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff f8fa 	bl	8000ba8 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe ffed 	bl	8000998 <__addsf3>
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	40c90fdb 	.word	0x40c90fdb
 80019cc:	40490fdb 	.word	0x40490fdb
 80019d0:	c0490fdb 	.word	0xc0490fdb
 80019d4:	3fc90fdb 	.word	0x3fc90fdb
 80019d8:	bfc90fdb 	.word	0xbfc90fdb
 80019dc:	3941e792 	.word	0x3941e792
 80019e0:	3c083097 	.word	0x3c083097
 80019e4:	3e2aa815 	.word	0x3e2aa815

080019e8 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b08b      	sub	sp, #44	; 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f8:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a00:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	6979      	ldr	r1, [r7, #20]
 8001a0c:	69b8      	ldr	r0, [r7, #24]
 8001a0e:	f7ff fa87 	bl	8000f20 <__aeabi_fcmpgt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <atan2_approx+0x34>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	e000      	b.n	8001a1e <atan2_approx+0x36>
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a26:	f7ff fa53 	bl	8000ed0 <__aeabi_fcmpeq>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d114      	bne.n	8001a5a <atan2_approx+0x72>
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	6938      	ldr	r0, [r7, #16]
 8001a3c:	f7ff fa52 	bl	8000ee4 <__aeabi_fcmplt>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <atan2_approx+0x62>
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	e000      	b.n	8001a4c <atan2_approx+0x64>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f95e 	bl	8000d10 <__aeabi_fdiv>
 8001a54:	4603      	mov	r3, r0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	e002      	b.n	8001a60 <atan2_approx+0x78>
    else res = 0.0f;
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001a60:	4938      	ldr	r1, [pc, #224]	; (8001b44 <atan2_approx+0x15c>)
 8001a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a64:	f7ff f8a0 	bl	8000ba8 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4937      	ldr	r1, [pc, #220]	; (8001b48 <atan2_approx+0x160>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe ff91 	bl	8000994 <__aeabi_fsub>
 8001a72:	4603      	mov	r3, r0
 8001a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f896 	bl	8000ba8 <__aeabi_fmul>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4933      	ldr	r1, [pc, #204]	; (8001b4c <atan2_approx+0x164>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe ff87 	bl	8000994 <__aeabi_fsub>
 8001a86:	4603      	mov	r3, r0
 8001a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f88c 	bl	8000ba8 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <atan2_approx+0x168>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ff7d 	bl	8000994 <__aeabi_fsub>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f882 	bl	8000ba8 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	492b      	ldr	r1, [pc, #172]	; (8001b54 <atan2_approx+0x16c>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe ff73 	bl	8000994 <__aeabi_fsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001ab4:	4928      	ldr	r1, [pc, #160]	; (8001b58 <atan2_approx+0x170>)
 8001ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab8:	f7ff f876 	bl	8000ba8 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4927      	ldr	r1, [pc, #156]	; (8001b5c <atan2_approx+0x174>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe ff69 	bl	8000998 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f86c 	bl	8000ba8 <__aeabi_fmul>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe ff5e 	bl	8000998 <__addsf3>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff f915 	bl	8000d10 <__aeabi_fdiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001aea:	6a39      	ldr	r1, [r7, #32]
 8001aec:	69f8      	ldr	r0, [r7, #28]
 8001aee:	f7ff fa17 	bl	8000f20 <__aeabi_fcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <atan2_approx+0x11c>
 8001af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <atan2_approx+0x178>)
 8001afc:	f7fe ff4a 	bl	8000994 <__aeabi_fsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	6838      	ldr	r0, [r7, #0]
 8001b0a:	f7ff f9eb 	bl	8000ee4 <__aeabi_fcmplt>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <atan2_approx+0x138>
 8001b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <atan2_approx+0x17c>)
 8001b18:	f7fe ff3c 	bl	8000994 <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff f9dd 	bl	8000ee4 <__aeabi_fcmplt>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <atan2_approx+0x150>
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    return res;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	372c      	adds	r7, #44	; 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	3d4e0939 	.word	0x3d4e0939
 8001b48:	3e9eb5e3 	.word	0x3e9eb5e3
 8001b4c:	3e16fa88 	.word	0x3e16fa88
 8001b50:	3f7ffe45 	.word	0x3f7ffe45
 8001b54:	34a8dfa7 	.word	0x34a8dfa7
 8001b58:	3f24fb99 	.word	0x3f24fb99
 8001b5c:	3e16a269 	.word	0x3e16a269
 8001b60:	3fc90fdb 	.word	0x3fc90fdb
 8001b64:	40490fdb 	.word	0x40490fdb

08001b68 <mpu_get_gyro>:


/**
 *  get gyro raw value
 */
void mpu_get_gyro(IMU_raw_t *k){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	  k->gyroy=(int16_t)(buffe[2]<<8)|buffe[3];
	  k->gyroz=(int16_t)(buffe[4]<<8)|buffe[5];
#endif
#ifdef MPU_VIA_SPI
	  uint8_t buffe[6];
	  buffe[0]= 0x43;// gyro address
 8001b70:	2343      	movs	r3, #67	; 0x43
 8001b72:	723b      	strb	r3, [r7, #8]
	  buffe[0] |=0x80;
 8001b74:	7a3b      	ldrb	r3, [r7, #8]
 8001b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	723b      	strb	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2110      	movs	r1, #16
 8001b82:	481a      	ldr	r0, [pc, #104]	; (8001bec <mpu_get_gyro+0x84>)
 8001b84:	f000 fed3 	bl	800292e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(SPI_PORT,&buffe[0],1,100);
 8001b88:	f107 0108 	add.w	r1, r7, #8
 8001b8c:	2364      	movs	r3, #100	; 0x64
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <mpu_get_gyro+0x88>)
 8001b92:	f001 fcdf 	bl	8003554 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(SPI_PORT,buffe,6,100);
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	2364      	movs	r3, #100	; 0x64
 8001b9c:	2206      	movs	r2, #6
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <mpu_get_gyro+0x88>)
 8001ba0:	f001 fe14 	bl	80037cc <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <mpu_get_gyro+0x84>)
 8001baa:	f000 fec0 	bl	800292e <HAL_GPIO_WritePin>

	  k->gyrox=(int16_t)(buffe[0]<<8)|buffe[1];
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	7a7b      	ldrb	r3, [r7, #9]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	80da      	strh	r2, [r3, #6]
	  k->gyroy=(int16_t)(buffe[2]<<8)|buffe[3];
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	811a      	strh	r2, [r3, #8]
	  k->gyroz=(int16_t)(buffe[4]<<8)|buffe[5];
 8001bd2:	7b3b      	ldrb	r3, [r7, #12]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	7b7b      	ldrb	r3, [r7, #13]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	815a      	strh	r2, [r3, #10]
#endif
	}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	20000080 	.word	0x20000080

08001bf4 <mpu_get_acc>:

/**
 *  get acc raw value
 */
void mpu_get_acc(IMU_raw_t *k){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	  k->accy=(int16_t)(buffe[2]<<8)|buffe[3];
	  k->accz=(int16_t)(buffe[4]<<8)|buffe[5];
#endif
#ifdef MPU_VIA_SPI
	  uint8_t buffe[6];
	  buffe[0] = 0x3b;// acc address
 8001bfc:	233b      	movs	r3, #59	; 0x3b
 8001bfe:	723b      	strb	r3, [r7, #8]
	  buffe[0] |=0x80;
 8001c00:	7a3b      	ldrb	r3, [r7, #8]
 8001c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	723b      	strb	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	481a      	ldr	r0, [pc, #104]	; (8001c78 <mpu_get_acc+0x84>)
 8001c10:	f000 fe8d 	bl	800292e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(SPI_PORT,buffe,1,100);
 8001c14:	f107 0108 	add.w	r1, r7, #8
 8001c18:	2364      	movs	r3, #100	; 0x64
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4817      	ldr	r0, [pc, #92]	; (8001c7c <mpu_get_acc+0x88>)
 8001c1e:	f001 fc99 	bl	8003554 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(SPI_PORT,buffe,6,100);
 8001c22:	f107 0108 	add.w	r1, r7, #8
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	2206      	movs	r2, #6
 8001c2a:	4814      	ldr	r0, [pc, #80]	; (8001c7c <mpu_get_acc+0x88>)
 8001c2c:	f001 fdce 	bl	80037cc <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIO_PORT,GPIO_CS_PIN,GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2110      	movs	r1, #16
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <mpu_get_acc+0x84>)
 8001c36:	f000 fe7a 	bl	800292e <HAL_GPIO_WritePin>

	  k->accx=(int16_t)buffe[0]<<8|buffe[1];
 8001c3a:	7a3b      	ldrb	r3, [r7, #8]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	7a7b      	ldrb	r3, [r7, #9]
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	801a      	strh	r2, [r3, #0]
	  k->accy=(int16_t)buffe[2]<<8|buffe[3];
 8001c4c:	7abb      	ldrb	r3, [r7, #10]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	805a      	strh	r2, [r3, #2]
	  k->accz=(int16_t)buffe[4]<<8|buffe[5];
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7b7b      	ldrb	r3, [r7, #13]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	809a      	strh	r2, [r3, #4]
#endif

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	20000080 	.word	0x20000080

08001c80 <get_offset>:

static void get_offset(){
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
	float pitch_acc,roll_acc;
	IMU_raw_t data;
	static int32_t contan_gyro[3];
	static int32_t contan_acc[3];

	for(uint16_t i=0;i<2000;i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	82fb      	strh	r3, [r7, #22]
 8001c8a:	e09a      	b.n	8001dc2 <get_offset+0x142>
		
        //  acc offset
		mpu_get_acc(&data);
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffb0 	bl	8001bf4 <mpu_get_acc>
		if((data.accx+data.accy+data.accz)!=0)k1+=1;
 8001c94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <get_offset+0x36>
 8001caa:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <get_offset+0x200>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <get_offset+0x200>)
 8001cb4:	801a      	strh	r2, [r3, #0]

        contan_acc[0] += data.accx;
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <get_offset+0x204>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <get_offset+0x204>)
 8001cc2:	6013      	str	r3, [r2, #0]
        contan_acc[1] += data.accy;
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <get_offset+0x204>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a6d      	ldr	r2, [pc, #436]	; (8001e84 <get_offset+0x204>)
 8001cd0:	6053      	str	r3, [r2, #4]
        contan_acc[2] += data.accz;
 8001cd2:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <get_offset+0x204>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <get_offset+0x204>)
 8001cde:	6093      	str	r3, [r2, #8]

		roll_acc   =-atan2_approx(data.accx,data.accz)*1/RAD;
 8001ce0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff0b 	bl	8000b00 <__aeabi_i2f>
 8001cea:	4604      	mov	r4, r0
 8001cec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ff05 	bl	8000b00 <__aeabi_i2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fe74 	bl	80019e8 <atan2_approx>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d06:	4960      	ldr	r1, [pc, #384]	; (8001e88 <get_offset+0x208>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f801 	bl	8000d10 <__aeabi_fdiv>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	613b      	str	r3, [r7, #16]
		pitch_acc  = atan2_approx(data.accy,data.accz)*1/RAD;
 8001d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fef2 	bl	8000b00 <__aeabi_i2f>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe feec 	bl	8000b00 <__aeabi_i2f>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff fe5b 	bl	80019e8 <atan2_approx>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4954      	ldr	r1, [pc, #336]	; (8001e88 <get_offset+0x208>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ffea 	bl	8000d10 <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
		
		acc_pitch_offset += pitch_acc;
 8001d40:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <get_offset+0x20c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fe26 	bl	8000998 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <get_offset+0x20c>)
 8001d52:	601a      	str	r2, [r3, #0]
		acc_roll_offset  += roll_acc;
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <get_offset+0x210>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fe1c 	bl	8000998 <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <get_offset+0x210>)
 8001d66:	601a      	str	r2, [r3, #0]
			
		// gyro offset		
		mpu_get_gyro(&data);
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fefc 	bl	8001b68 <mpu_get_gyro>
		if((data.gyrox+data.gyroy+data.gyroz)!=0)k2++;
 8001d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d80:	4413      	add	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <get_offset+0x112>
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <get_offset+0x214>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <get_offset+0x214>)
 8001d90:	801a      	strh	r2, [r3, #0]
	    contan_gyro[0] += data.gyrox;
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <get_offset+0x218>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a3e      	ldr	r2, [pc, #248]	; (8001e98 <get_offset+0x218>)
 8001d9e:	6013      	str	r3, [r2, #0]
	    contan_gyro[1] += data.gyroy;
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <get_offset+0x218>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <get_offset+0x218>)
 8001dac:	6053      	str	r3, [r2, #4]
	    contan_gyro[2] += data.gyroz;
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <get_offset+0x218>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <get_offset+0x218>)
 8001dba:	6093      	str	r3, [r2, #8]
	for(uint16_t i=0;i<2000;i++){
 8001dbc:	8afb      	ldrh	r3, [r7, #22]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	82fb      	strh	r3, [r7, #22]
 8001dc2:	8afb      	ldrh	r3, [r7, #22]
 8001dc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001dc8:	f4ff af60 	bcc.w	8001c8c <get_offset+0xc>
	}

	  acc_offs_x = contan_acc[0]/k1;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <get_offset+0x204>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <get_offset+0x200>)
 8001dd2:	8812      	ldrh	r2, [r2, #0]
 8001dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <get_offset+0x21c>)
 8001ddc:	801a      	strh	r2, [r3, #0]
      acc_offs_y = contan_acc[1]/k1;
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <get_offset+0x204>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <get_offset+0x200>)
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <get_offset+0x220>)
 8001dee:	801a      	strh	r2, [r3, #0]
      acc_offs_z = contan_acc[2]/k1;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <get_offset+0x204>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <get_offset+0x200>)
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <get_offset+0x224>)
 8001e00:	801a      	strh	r2, [r3, #0]

	  gyr_offs_x = contan_gyro[0]/k2;
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <get_offset+0x218>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <get_offset+0x214>)
 8001e08:	8812      	ldrh	r2, [r2, #0]
 8001e0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <get_offset+0x228>)
 8001e12:	801a      	strh	r2, [r3, #0]
      gyr_offs_y = contan_gyro[1]/k2;
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <get_offset+0x218>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <get_offset+0x214>)
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <get_offset+0x22c>)
 8001e24:	801a      	strh	r2, [r3, #0]
      gyr_offs_z = contan_gyro[2]/k2;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <get_offset+0x218>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <get_offset+0x214>)
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <get_offset+0x230>)
 8001e36:	801a      	strh	r2, [r3, #0]

	  acc_pitch_offset /=(float)k1;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <get_offset+0x20c>)
 8001e3a:	681c      	ldr	r4, [r3, #0]
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <get_offset+0x200>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fe59 	bl	8000af8 <__aeabi_ui2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe ff60 	bl	8000d10 <__aeabi_fdiv>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <get_offset+0x20c>)
 8001e56:	601a      	str	r2, [r3, #0]
	  acc_roll_offset  /=(float)k1;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <get_offset+0x210>)
 8001e5a:	681c      	ldr	r4, [r3, #0]
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <get_offset+0x200>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fe49 	bl	8000af8 <__aeabi_ui2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7fe ff50 	bl	8000d10 <__aeabi_fdiv>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <get_offset+0x210>)
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}
 8001e80:	200001c4 	.word	0x200001c4
 8001e84:	200001c8 	.word	0x200001c8
 8001e88:	3c8efa35 	.word	0x3c8efa35
 8001e8c:	200001b0 	.word	0x200001b0
 8001e90:	200001b4 	.word	0x200001b4
 8001e94:	200001d4 	.word	0x200001d4
 8001e98:	200001d8 	.word	0x200001d8
 8001e9c:	200001be 	.word	0x200001be
 8001ea0:	200001c0 	.word	0x200001c0
 8001ea4:	200001c2 	.word	0x200001c2
 8001ea8:	200001b8 	.word	0x200001b8
 8001eac:	200001ba 	.word	0x200001ba
 8001eb0:	200001bc 	.word	0x200001bc

08001eb4 <MPU_init>:



void MPU_init(){  
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit(I2C_PORT,0x68<<1,buffer,2,1);
#endif
#ifdef MPU_VIA_SPI
    uint8_t data[2];

	data[0]=0x6b;
 8001eba:	236b      	movs	r3, #107	; 0x6b
 8001ebc:	713b      	strb	r3, [r7, #4]
	data[1]=0x00;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	481e      	ldr	r0, [pc, #120]	; (8001f40 <MPU_init+0x8c>)
 8001ec8:	f000 fd31 	bl	800292e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 8001ecc:	1d39      	adds	r1, r7, #4
 8001ece:	2364      	movs	r3, #100	; 0x64
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	481c      	ldr	r0, [pc, #112]	; (8001f44 <MPU_init+0x90>)
 8001ed4:	f001 fb3e 	bl	8003554 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2110      	movs	r1, #16
 8001edc:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MPU_init+0x8c>)
 8001ede:	f000 fd26 	bl	800292e <HAL_GPIO_WritePin>

	data[0]=0x1b;
 8001ee2:	231b      	movs	r3, #27
 8001ee4:	713b      	strb	r3, [r7, #4]
	data[1]=0x08;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2110      	movs	r1, #16
 8001eee:	4814      	ldr	r0, [pc, #80]	; (8001f40 <MPU_init+0x8c>)
 8001ef0:	f000 fd1d 	bl	800292e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 8001ef4:	1d39      	adds	r1, r7, #4
 8001ef6:	2364      	movs	r3, #100	; 0x64
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <MPU_init+0x90>)
 8001efc:	f001 fb2a 	bl	8003554 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	480e      	ldr	r0, [pc, #56]	; (8001f40 <MPU_init+0x8c>)
 8001f06:	f000 fd12 	bl	800292e <HAL_GPIO_WritePin>

	data[0]=0x1c;
 8001f0a:	231c      	movs	r3, #28
 8001f0c:	713b      	strb	r3, [r7, #4]
	data[1]=0x10;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2110      	movs	r1, #16
 8001f16:	480a      	ldr	r0, [pc, #40]	; (8001f40 <MPU_init+0x8c>)
 8001f18:	f000 fd09 	bl	800292e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,2,100);
 8001f1c:	1d39      	adds	r1, r7, #4
 8001f1e:	2364      	movs	r3, #100	; 0x64
 8001f20:	2202      	movs	r2, #2
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <MPU_init+0x90>)
 8001f24:	f001 fb16 	bl	8003554 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MPU_init+0x8c>)
 8001f2e:	f000 fcfe 	bl	800292e <HAL_GPIO_WritePin>


#endif
	get_offset();
 8001f32:	f7ff fea5 	bl	8001c80 <get_offset>
	// Finish setup MPU-6050 register
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010800 	.word	0x40010800
 8001f44:	20000080 	.word	0x20000080

08001f48 <MPU_update>:
void MPU_update(euler_angle_t *m,int delta_t){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
	static float Pitch_acc,Roll_acc;
	static IMU_raw_t p;
	float lsb2degre =(delta_t*0.000001)/LSB_gyr;
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f7fe fa4e 	bl	80003f4 <__aeabi_i2d>
 8001f58:	a365      	add	r3, pc, #404	; (adr r3, 80020f0 <MPU_update+0x1a8>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fab3 	bl	80004c8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	a363      	add	r3, pc, #396	; (adr r3, 80020f8 <MPU_update+0x1b0>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fbd4 	bl	800071c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fcb6 	bl	80008ec <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
	// gyro calibrate

	mpu_get_gyro(&p);
 8001f84:	485e      	ldr	r0, [pc, #376]	; (8002100 <MPU_update+0x1b8>)
 8001f86:	f7ff fdef 	bl	8001b68 <mpu_get_gyro>

    m->pitch += (float)(p.gyrox -gyr_offs_x)*lsb2degre;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <MPU_update+0x1b8>)
 8001f90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <MPU_update+0x1bc>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fdae 	bl	8000b00 <__aeabi_i2f>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fdfd 	bl	8000ba8 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe fcf0 	bl	8000998 <__addsf3>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
    m->roll  += (float)(p.gyroy -gyr_offs_y)*lsb2degre;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685c      	ldr	r4, [r3, #4]
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <MPU_update+0x1b8>)
 8001fc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <MPU_update+0x1c0>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fd93 	bl	8000b00 <__aeabi_i2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fde2 	bl	8000ba8 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe fcd5 	bl	8000998 <__addsf3>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	605a      	str	r2, [r3, #4]
    m->yaw   += (float)(p.gyroz -gyr_offs_z)*lsb2degre;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689c      	ldr	r4, [r3, #8]
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <MPU_update+0x1b8>)
 8001ffc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002000:	461a      	mov	r2, r3
 8002002:	4b42      	ldr	r3, [pc, #264]	; (800210c <MPU_update+0x1c4>)
 8002004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fd78 	bl	8000b00 <__aeabi_i2f>
 8002010:	4603      	mov	r3, r0
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fdc7 	bl	8000ba8 <__aeabi_fmul>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe fcba 	bl	8000998 <__addsf3>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
	
	if(m->pitch>180.0f)m->pitch  -= 360.0f;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4937      	ldr	r1, [pc, #220]	; (8002110 <MPU_update+0x1c8>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ff74 	bl	8000f20 <__aeabi_fcmpgt>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <MPU_update+0x10c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4934      	ldr	r1, [pc, #208]	; (8002114 <MPU_update+0x1cc>)
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fca5 	bl	8000994 <__aeabi_fsub>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e012      	b.n	800207a <MPU_update+0x132>
	else if(m->pitch<-180.0f)m->pitch += 360.0f;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	492f      	ldr	r1, [pc, #188]	; (8002118 <MPU_update+0x1d0>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe ff42 	bl	8000ee4 <__aeabi_fcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <MPU_update+0x132>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	492a      	ldr	r1, [pc, #168]	; (8002114 <MPU_update+0x1cc>)
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fc93 	bl	8000998 <__addsf3>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	601a      	str	r2, [r3, #0]
	
    if(m->roll>180.0f)m->roll -= 360.0f;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4924      	ldr	r1, [pc, #144]	; (8002110 <MPU_update+0x1c8>)
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe ff4d 	bl	8000f20 <__aeabi_fcmpgt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <MPU_update+0x15a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4920      	ldr	r1, [pc, #128]	; (8002114 <MPU_update+0x1cc>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fc7e 	bl	8000994 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	e012      	b.n	80020c8 <MPU_update+0x180>
    else if(m->roll<-180.0f)m->roll += 360.0f;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	491c      	ldr	r1, [pc, #112]	; (8002118 <MPU_update+0x1d0>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe ff1b 	bl	8000ee4 <__aeabi_fcmplt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <MPU_update+0x180>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <MPU_update+0x1cc>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fc6c 	bl	8000998 <__addsf3>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	605a      	str	r2, [r3, #4]
	
	if(m->yaw>360.0f)m->yaw  -= 360.0f;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4911      	ldr	r1, [pc, #68]	; (8002114 <MPU_update+0x1cc>)
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe ff26 	bl	8000f20 <__aeabi_fcmpgt>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <MPU_update+0x1d4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	490d      	ldr	r1, [pc, #52]	; (8002114 <MPU_update+0x1cc>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fc57 	bl	8000994 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	e029      	b.n	8002144 <MPU_update+0x1fc>
 80020f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80020f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40506000 	.word	0x40506000
 8002100:	200001e4 	.word	0x200001e4
 8002104:	200001b8 	.word	0x200001b8
 8002108:	200001ba 	.word	0x200001ba
 800210c:	200001bc 	.word	0x200001bc
 8002110:	43340000 	.word	0x43340000
 8002114:	43b40000 	.word	0x43b40000
 8002118:	c3340000 	.word	0xc3340000
	else if(m->yaw<0.0f)m->yaw  += 360.0f;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fedd 	bl	8000ee4 <__aeabi_fcmplt>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <MPU_update+0x1fc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	496f      	ldr	r1, [pc, #444]	; (80022f4 <MPU_update+0x3ac>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fc2e 	bl	8000998 <__addsf3>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]

	m->pitch += m->roll   * sin_approx((p.gyroz -gyr_offs_z)*lsb2degre*(float)RAD);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685c      	ldr	r4, [r3, #4]
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <MPU_update+0x3b0>)
 800214a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800214e:	461a      	mov	r2, r3
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <MPU_update+0x3b4>)
 8002152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fcd1 	bl	8000b00 <__aeabi_i2f>
 800215e:	4603      	mov	r3, r0
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fd20 	bl	8000ba8 <__aeabi_fmul>
 8002168:	4603      	mov	r3, r0
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <MPU_update+0x3b8>)
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd1b 	bl	8000ba8 <__aeabi_fmul>
 8002172:	4603      	mov	r3, r0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fb9b 	bl	80018b0 <sin_approx>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fe fd12 	bl	8000ba8 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7fe fc02 	bl	8000998 <__addsf3>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
	m->roll  -= m->pitch  * sin_approx((p.gyroz -gyr_offs_z)*lsb2degre*(float)RAD);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681c      	ldr	r4, [r3, #0]
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <MPU_update+0x3b0>)
 80021a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b54      	ldr	r3, [pc, #336]	; (80022fc <MPU_update+0x3b4>)
 80021aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fca5 	bl	8000b00 <__aeabi_i2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fcf4 	bl	8000ba8 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	494f      	ldr	r1, [pc, #316]	; (8002300 <MPU_update+0x3b8>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fcef 	bl	8000ba8 <__aeabi_fmul>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fb6f 	bl	80018b0 <sin_approx>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4619      	mov	r1, r3
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7fe fce6 	bl	8000ba8 <__aeabi_fmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fbd4 	bl	8000994 <__aeabi_fsub>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	605a      	str	r2, [r3, #4]

    //  acc calibrate
	mpu_get_acc(&p);
 80021f4:	4840      	ldr	r0, [pc, #256]	; (80022f8 <MPU_update+0x3b0>)
 80021f6:	f7ff fcfd 	bl	8001bf4 <mpu_get_acc>
	Roll_acc   =(-atan2_approx(p.accx,p.accz)*1/RAD - acc_roll_offset);
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <MPU_update+0x3b0>)
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fc7d 	bl	8000b00 <__aeabi_i2f>
 8002206:	4604      	mov	r4, r0
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <MPU_update+0x3b0>)
 800220a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc76 	bl	8000b00 <__aeabi_i2f>
 8002214:	4603      	mov	r3, r0
 8002216:	4619      	mov	r1, r3
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff fbe5 	bl	80019e8 <atan2_approx>
 800221e:	4603      	mov	r3, r0
 8002220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002224:	4936      	ldr	r1, [pc, #216]	; (8002300 <MPU_update+0x3b8>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd72 	bl	8000d10 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <MPU_update+0x3bc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe fbac 	bl	8000994 <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <MPU_update+0x3c0>)
 8002242:	601a      	str	r2, [r3, #0]
	Pitch_acc  = (atan2_approx(p.accy,p.accz)*1/RAD - acc_pitch_offset);
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <MPU_update+0x3b0>)
 8002246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fc58 	bl	8000b00 <__aeabi_i2f>
 8002250:	4604      	mov	r4, r0
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <MPU_update+0x3b0>)
 8002254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fc51 	bl	8000b00 <__aeabi_i2f>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fbc0 	bl	80019e8 <atan2_approx>
 8002268:	4603      	mov	r3, r0
 800226a:	4925      	ldr	r1, [pc, #148]	; (8002300 <MPU_update+0x3b8>)
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fd4f 	bl	8000d10 <__aeabi_fdiv>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <MPU_update+0x3c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7fe fb89 	bl	8000994 <__aeabi_fsub>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <MPU_update+0x3c8>)
 8002288:	601a      	str	r2, [r3, #0]
	
	m->pitch +=kalman_gain*(Pitch_acc-m->pitch);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681c      	ldr	r4, [r3, #0]
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <MPU_update+0x3c8>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7fe fb7b 	bl	8000994 <__aeabi_fsub>
 800229e:	4603      	mov	r3, r0
 80022a0:	491c      	ldr	r1, [pc, #112]	; (8002314 <MPU_update+0x3cc>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fc80 	bl	8000ba8 <__aeabi_fmul>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7fe fb73 	bl	8000998 <__addsf3>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
	m->roll  +=kalman_gain*(Roll_acc-m->roll);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685c      	ldr	r4, [r3, #4]
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MPU_update+0x3c0>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7fe fb63 	bl	8000994 <__aeabi_fsub>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4910      	ldr	r1, [pc, #64]	; (8002314 <MPU_update+0x3cc>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc68 	bl	8000ba8 <__aeabi_fmul>
 80022d8:	4603      	mov	r3, r0
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f7fe fb5b 	bl	8000998 <__addsf3>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
     yy = p.accy- acc_offs_y;
	 xc = xx*cos_approx(m->roll*RAD) + yy*sin_approx(m->roll*RAD)*sin_approx(m->pitch*RAD) +p.accz*sin_approx(m->roll*RAD)*cos_approx(m->pitch*RAD);
     yc = yy*cos_approx(m->pitch*RAD) - p.accz*sin_approx(m->pitch*RAD);
	 */

}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	43b40000 	.word	0x43b40000
 80022f8:	200001e4 	.word	0x200001e4
 80022fc:	200001bc 	.word	0x200001bc
 8002300:	3c8efa35 	.word	0x3c8efa35
 8002304:	200001b4 	.word	0x200001b4
 8002308:	200001f0 	.word	0x200001f0
 800230c:	200001b0 	.word	0x200001b0
 8002310:	200001f4 	.word	0x200001f4
 8002314:	3a83126f 	.word	0x3a83126f

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_Init+0x28>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_Init+0x28>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f923 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff f80a 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f93b 	bl	80025de <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f903 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000000 	.word	0x20000000
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x20>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_IncTick+0x20>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	20000008 	.word	0x20000008
 80023c4:	200001f8 	.word	0x200001f8

080023c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_GetTick+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	200001f8 	.word	0x200001f8

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <__NVIC_EnableIRQ+0x34>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff90 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff2d 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff42 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff90 	bl	80024cc <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5f 	bl	8002478 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff35 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	e169      	b.n	80028e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800260c:	2201      	movs	r2, #1
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8158 	bne.w	80028da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a9a      	ldr	r2, [pc, #616]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002634:	4a98      	ldr	r2, [pc, #608]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d875      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800263a:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_GPIO_Init+0x2a4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d058      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002640:	4a96      	ldr	r2, [pc, #600]	; (800289c <HAL_GPIO_Init+0x2a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d86f      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002646:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d052      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 800264c:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d869      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04c      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002658:	4a92      	ldr	r2, [pc, #584]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d863      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800265e:	4a92      	ldr	r2, [pc, #584]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d046      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002664:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d85d      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800266a:	2b12      	cmp	r3, #18
 800266c:	d82a      	bhi.n	80026c4 <HAL_GPIO_Init+0xcc>
 800266e:	2b12      	cmp	r3, #18
 8002670:	d859      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_GPIO_Init+0x80>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026cd 	.word	0x080026cd
 8002680:	080026df 	.word	0x080026df
 8002684:	08002721 	.word	0x08002721
 8002688:	08002727 	.word	0x08002727
 800268c:	08002727 	.word	0x08002727
 8002690:	08002727 	.word	0x08002727
 8002694:	08002727 	.word	0x08002727
 8002698:	08002727 	.word	0x08002727
 800269c:	08002727 	.word	0x08002727
 80026a0:	08002727 	.word	0x08002727
 80026a4:	08002727 	.word	0x08002727
 80026a8:	08002727 	.word	0x08002727
 80026ac:	08002727 	.word	0x08002727
 80026b0:	08002727 	.word	0x08002727
 80026b4:	08002727 	.word	0x08002727
 80026b8:	08002727 	.word	0x08002727
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	4a79      	ldr	r2, [pc, #484]	; (80028ac <HAL_GPIO_Init+0x2b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ca:	e02c      	b.n	8002726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e029      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	3304      	adds	r3, #4
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e024      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	3308      	adds	r3, #8
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e01f      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	330c      	adds	r3, #12
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e01a      	b.n	8002728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026fa:	2304      	movs	r3, #4
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e013      	b.n	8002728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002708:	2308      	movs	r3, #8
 800270a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	611a      	str	r2, [r3, #16]
          break;
 8002712:	e009      	b.n	8002728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002714:	2308      	movs	r3, #8
 8002716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	615a      	str	r2, [r3, #20]
          break;
 800271e:	e003      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x130>
          break;
 8002726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	d801      	bhi.n	8002732 <HAL_GPIO_Init+0x13a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_Init+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d802      	bhi.n	8002744 <HAL_GPIO_Init+0x14c>
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x152>
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3b08      	subs	r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	210f      	movs	r1, #15
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80b1 	beq.w	80028da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002778:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_GPIO_Init+0x2c0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <HAL_GPIO_Init+0x2c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3e      	ldr	r2, [pc, #248]	; (80028c0 <HAL_GPIO_Init+0x2c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x1e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <HAL_GPIO_Init+0x2cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_Init+0x1e0>
 80027d4:	2303      	movs	r3, #3
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027d8:	2304      	movs	r3, #4
 80027da:	e004      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027dc:	2302      	movs	r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e4:	2300      	movs	r3, #0
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	f002 0203 	and.w	r2, r2, #3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4093      	lsls	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027f6:	492f      	ldr	r1, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	492c      	ldr	r1, [pc, #176]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4928      	ldr	r1, [pc, #160]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	491e      	ldr	r1, [pc, #120]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	4914      	ldr	r1, [pc, #80]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
 8002894:	e021      	b.n	80028da <HAL_GPIO_Init+0x2e2>
 8002896:	bf00      	nop
 8002898:	10320000 	.word	0x10320000
 800289c:	10310000 	.word	0x10310000
 80028a0:	10220000 	.word	0x10220000
 80028a4:	10210000 	.word	0x10210000
 80028a8:	10120000 	.word	0x10120000
 80028ac:	10110000 	.word	0x10110000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4909      	ldr	r1, [pc, #36]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f ae8e 	bne.w	800260c <HAL_GPIO_Init+0x14>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	372c      	adds	r7, #44	; 0x2c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e001      	b.n	8002922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293e:	787b      	ldrb	r3, [r7, #1]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294a:	e003      	b.n	8002954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe ff84 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e12b      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fbaa 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f4:	f000 fce4 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80029f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a81      	ldr	r2, [pc, #516]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d807      	bhi.n	8002a14 <HAL_I2C_Init+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a80      	ldr	r2, [pc, #512]	; (8002c08 <HAL_I2C_Init+0x278>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e006      	b.n	8002a22 <HAL_I2C_Init+0x92>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_I2C_Init+0x27c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0e7      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a78      	ldr	r2, [pc, #480]	; (8002c10 <HAL_I2C_Init+0x280>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d802      	bhi.n	8002a64 <HAL_I2C_Init+0xd4>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	e009      	b.n	8002a78 <HAL_I2C_Init+0xe8>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_I2C_Init+0x284>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	495c      	ldr	r1, [pc, #368]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d819      	bhi.n	8002acc <HAL_I2C_Init+0x13c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e59      	subs	r1, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa6:	1c59      	adds	r1, r3, #1
 8002aa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aac:	400b      	ands	r3, r1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_I2C_Init+0x138>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e59      	subs	r1, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac6:	e051      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e04f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <HAL_I2C_Init+0x168>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e012      	b.n	8002b1e <HAL_I2C_Init+0x18e>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x196>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10e      	bne.n	8002b4c <HAL_I2C_Init+0x1bc>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e58      	subs	r0, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	440b      	add	r3, r1
 8002b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	6809      	ldr	r1, [r1, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6911      	ldr	r1, [r2, #16]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	000186a0 	.word	0x000186a0
 8002c08:	001e847f 	.word	0x001e847f
 8002c0c:	003d08ff 	.word	0x003d08ff
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e272      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c38:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c44:	4b8f      	ldr	r3, [pc, #572]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
 8002c50:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x12c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e24c      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7f      	ldr	r2, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fb68 	bl	80023c8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff fb64 	bl	80023c8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e200      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe4>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fb54 	bl	80023c8 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff fb50 	bl	80023c8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1ec      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x10c>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c0      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4939      	ldr	r1, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7ff fb09 	bl	80023c8 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7ff fb05 	bl	80023c8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4927      	ldr	r1, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff fae8 	bl	80023c8 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7ff fae4 	bl	80023c8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e180      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d03a      	beq.n	8002e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d019      	beq.n	8002e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff fac8 	bl	80023c8 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fac4 	bl	80023c8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e160      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f000 fad8 	bl	8003410 <RCC_Delay>
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7ff faae 	bl	80023c8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6e:	e00f      	b.n	8002e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7ff faaa 	bl	80023c8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e146      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	42420000 	.word	0x42420000
 8002e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e9      	bne.n	8002e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a6 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7ff fa6b 	bl	80023c8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7ff fa67 	bl	80023c8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e103      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f32:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x356>
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a60      	ldr	r2, [pc, #384]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a57      	ldr	r2, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7ff fa1b 	bl	80023c8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff fa17 	bl	80023c8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x37e>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7ff fa05 	bl	80023c8 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7ff fa01 	bl	80023c8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e09b      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d061      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d146      	bne.n	80030a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7ff f9d5 	bl	80023c8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7ff f9d1 	bl	80023c8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e06d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a19      	ldr	r1, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	430b      	orrs	r3, r1
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7ff f9a5 	bl	80023c8 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff f9a1 	bl	80023c8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
 80030a0:	e035      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff f98e 	bl	80023c8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7ff f98a 	bl	80023c8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e026      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x498>
 80030ce:	e01e      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e019      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x500>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0d0      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d910      	bls.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4965      	ldr	r1, [pc, #404]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d040      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e073      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7ff f8dc 	bl	80023c8 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7ff f8d8 	bl	80023c8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e053      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4922      	ldr	r1, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1cc>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f83a 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08004950 	.word	0x08004950
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b490      	push	{r4, r7}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_GetSysClockFreq+0xac>)
 80032f8:	1d3c      	adds	r4, r7, #4
 80032fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003300:	f240 2301 	movw	r3, #513	; 0x201
 8003304:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x40>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x46>
 800332e:	e02b      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	623b      	str	r3, [r7, #32]
      break;
 8003334:	e02b      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	443b      	add	r3, r7
 8003342:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003346:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	3328      	adds	r3, #40	; 0x28
 800335e:	443b      	add	r3, r7
 8003360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	fb03 f202 	mul.w	r2, r3, r2
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e004      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	623b      	str	r3, [r7, #32]
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800338a:	623b      	str	r3, [r7, #32]
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6a3b      	ldr	r3, [r7, #32]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc90      	pop	{r4, r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	08004940 	.word	0x08004940
 80033a0:	40021000 	.word	0x40021000
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <HAL_RCC_GetHCLKFreq+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff2 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08004960 	.word	0x08004960

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffde 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0adb      	lsrs	r3, r3, #11
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	08004960 	.word	0x08004960

08003410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <RCC_Delay+0x34>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <RCC_Delay+0x38>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800342c:	bf00      	nop
  }
  while (Delay --);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <RCC_Delay+0x1c>
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000000 	.word	0x20000000
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e076      	b.n	800354c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346e:	d009      	beq.n	8003484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
 8003476:	e005      	b.n	8003484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd ff0a 	bl	80012b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	0c1a      	lsrs	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f002 0204 	and.w	r2, r2, #4
 800352a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_SPI_Transmit+0x22>
 8003572:	2302      	movs	r3, #2
 8003574:	e126      	b.n	80037c4 <HAL_SPI_Transmit+0x270>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357e:	f7fe ff23 	bl	80023c8 <HAL_GetTick>
 8003582:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d002      	beq.n	800359a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003598:	e10b      	b.n	80037b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Transmit+0x52>
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035aa:	e102      	b.n	80037b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2203      	movs	r2, #3
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f2:	d10f      	bne.n	8003614 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003612:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d007      	beq.n	8003632 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363a:	d14b      	bne.n	80036d4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0xf6>
 8003644:	8afb      	ldrh	r3, [r7, #22]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d13e      	bne.n	80036c8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800366e:	e02b      	b.n	80036c8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d112      	bne.n	80036a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a2:	e011      	b.n	80036c8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a4:	f7fe fe90 	bl	80023c8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d803      	bhi.n	80036bc <HAL_SPI_Transmit+0x168>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x16e>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c6:	e074      	b.n	80037b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ce      	bne.n	8003670 <HAL_SPI_Transmit+0x11c>
 80036d2:	e04c      	b.n	800376e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Transmit+0x18e>
 80036dc:	8afb      	ldrh	r3, [r7, #22]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d140      	bne.n	8003764 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003708:	e02c      	b.n	8003764 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d113      	bne.n	8003740 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	7812      	ldrb	r2, [r2, #0]
 8003724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	86da      	strh	r2, [r3, #54]	; 0x36
 800373e:	e011      	b.n	8003764 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003740:	f7fe fe42 	bl	80023c8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d803      	bhi.n	8003758 <HAL_SPI_Transmit+0x204>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d102      	bne.n	800375e <HAL_SPI_Transmit+0x20a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003762:	e026      	b.n	80037b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cd      	bne.n	800370a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fbb8 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e000      	b.n	80037b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e8:	d112      	bne.n	8003810 <HAL_SPI_Receive+0x44>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2204      	movs	r2, #4
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f8f1 	bl	80039ee <HAL_SPI_TransmitReceive>
 800380c:	4603      	mov	r3, r0
 800380e:	e0ea      	b.n	80039e6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_SPI_Receive+0x52>
 800381a:	2302      	movs	r3, #2
 800381c:	e0e3      	b.n	80039e6 <HAL_SPI_Receive+0x21a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003826:	f7fe fdcf 	bl	80023c8 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d002      	beq.n	800383e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800383c:	e0ca      	b.n	80039d4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Receive+0x7e>
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800384e:	e0c1      	b.n	80039d4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2204      	movs	r2, #4
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	88fa      	ldrh	r2, [r7, #6]
 800386e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003896:	d10f      	bne.n	80038b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d007      	beq.n	80038d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d162      	bne.n	80039a4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038de:	e02e      	b.n	800393e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d115      	bne.n	800391a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f103 020c 	add.w	r2, r3, #12
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003918:	e011      	b.n	800393e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391a:	f7fe fd55 	bl	80023c8 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d803      	bhi.n	8003932 <HAL_SPI_Receive+0x166>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d102      	bne.n	8003938 <HAL_SPI_Receive+0x16c>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800393c:	e04a      	b.n	80039d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1cb      	bne.n	80038e0 <HAL_SPI_Receive+0x114>
 8003948:	e031      	b.n	80039ae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d113      	bne.n	8003980 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	b292      	uxth	r2, r2
 8003964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	1c9a      	adds	r2, r3, #2
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800397e:	e011      	b.n	80039a4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003980:	f7fe fd22 	bl	80023c8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d803      	bhi.n	8003998 <HAL_SPI_Receive+0x1cc>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d102      	bne.n	800399e <HAL_SPI_Receive+0x1d2>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039a2:	e017      	b.n	80039d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1cd      	bne.n	800394a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa46 	bl	8003e44 <SPI_EndRxTransaction>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
 80039d0:	e000      	b.n	80039d4 <HAL_SPI_Receive+0x208>
  }

error :
 80039d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08c      	sub	sp, #48	; 0x30
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x26>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e18a      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x33c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fcd4 	bl	80023c8 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d00f      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x70>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a44:	d107      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x68>
 8003a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5c:	e15b      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x82>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x82>
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a76:	e14e      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d003      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2205      	movs	r2, #5
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae8:	d178      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x10a>
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d166      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1c:	e053      	b.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d11b      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d119      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x1b8>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d014      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	b292      	uxth	r2, r2
 8003b88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ba6:	f7fe fc0f 	bl	80023c8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d807      	bhi.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bc4:	e0a7      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1a6      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x130>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1a1      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x130>
 8003bda:	e07c      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x1fc>
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d16b      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c10:	e057      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11c      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d114      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d119      	bne.n	8003c9c <HAL_SPI_TransmitReceive+0x2ae>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c9c:	f7fe fb94 	bl	80023c8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d803      	bhi.n	8003cb4 <HAL_SPI_TransmitReceive+0x2c6>
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x2cc>
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cc0:	e029      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1a2      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x224>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d19d      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f904 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cf2:	e010      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e000      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3730      	adds	r7, #48	; 0x30
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d44:	f7fe fb40 	bl	80023c8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d54:	f7fe fb38 	bl	80023c8 <HAL_GetTick>
 8003d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	0d1b      	lsrs	r3, r3, #20
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6a:	e054      	b.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d050      	beq.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d74:	f7fe fb28 	bl	80023c8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d902      	bls.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13d      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d111      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d004      	beq.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d107      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd0:	d10f      	bne.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e017      	b.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d19b      	bne.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000

08003e44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e58:	d111      	bne.n	8003e7e <SPI_EndRxTransaction+0x3a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e62:	d004      	beq.n	8003e6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6c:	d107      	bne.n	8003e7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e86:	d117      	bne.n	8003eb8 <SPI_EndRxTransaction+0x74>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e90:	d112      	bne.n	8003eb8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff ff49 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01a      	beq.n	8003ede <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e013      	b.n	8003ee0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff36 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff18 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e000      	b.n	8003f1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd fac8 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fa70 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e03a      	b.n	8004052 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_TIM_Base_Start_IT+0x98>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d009      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <HAL_TIM_Base_Start_IT+0x9c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIM_Base_Start_IT+0xa0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d111      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b06      	cmp	r3, #6
 800402c:	d010      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e007      	b.n	8004050 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800

08004068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0202 	mvn.w	r2, #2
 8004094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9b1 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a4 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9b3 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0204 	mvn.w	r2, #4
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f987 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f97a 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f989 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0208 	mvn.w	r2, #8
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2204      	movs	r2, #4
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f95d 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f950 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f95f 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b10      	cmp	r3, #16
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0210 	mvn.w	r2, #16
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2208      	movs	r2, #8
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f933 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f926 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f935 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0201 	mvn.w	r2, #1
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fb34 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b80      	cmp	r3, #128	; 0x80
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa77 	bl	8004706 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8f9 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b20      	cmp	r3, #32
 800425e:	d107      	bne.n	8004270 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0220 	mvn.w	r2, #32
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa42 	bl	80046f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIM_ConfigClockSource+0x18>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b3      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x180>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c8:	d03e      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xd0>
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	f200 8087 	bhi.w	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	f000 8085 	beq.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d87f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042e0:	2b70      	cmp	r3, #112	; 0x70
 80042e2:	d01a      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xa2>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d87b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042e8:	2b60      	cmp	r3, #96	; 0x60
 80042ea:	d050      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x116>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d877      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	d03c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xf6>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d873      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d058      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x136>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d86f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b30      	cmp	r3, #48	; 0x30
 8004302:	d064      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d86b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d060      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d867      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 8004314:	2b10      	cmp	r3, #16
 8004316:	d05a      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004318:	e062      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f000 f966 	bl	80045fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800433c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	609a      	str	r2, [r3, #8]
      break;
 8004346:	e04e      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f000 f94f 	bl	80045fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436a:	609a      	str	r2, [r3, #8]
      break;
 800436c:	e03b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f8c6 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2150      	movs	r1, #80	; 0x50
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f91d 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 800438c:	e02b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f8e4 	bl	8004568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2160      	movs	r1, #96	; 0x60
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f90d 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e01b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f8a6 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f8fd 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e00b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 f8f4 	bl	80045c6 <TIM_ITRx_SetConfig>
        break;
 80043de:	e002      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a26      	ldr	r2, [pc, #152]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a25      	ldr	r2, [pc, #148]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 030a 	bic.w	r3, r3, #10
 8004548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 0210 	bic.w	r2, r3, #16
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	031b      	lsls	r3, r3, #12
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	621a      	str	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f043 0307 	orr.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	431a      	orrs	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e046      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d009      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800

080046f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e03f      	b.n	80047aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc ff1e 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f829 	bl	80047b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047ee:	f023 030c 	bic.w	r3, r3, #12
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <UART_SetConfig+0x114>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d103      	bne.n	8004824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fe fde4 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	e002      	b.n	800482a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe fdcc 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <UART_SetConfig+0x118>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	0119      	lsls	r1, r3, #4
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <UART_SetConfig+0x118>)
 8004862:	fba3 0302 	umull	r0, r3, r3, r2
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2064      	movs	r0, #100	; 0x64
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	3332      	adds	r3, #50	; 0x32
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <UART_SetConfig+0x118>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004880:	4419      	add	r1, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009a      	lsls	r2, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fbb2 f2f3 	udiv	r2, r2, r3
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <UART_SetConfig+0x118>)
 800489a:	fba3 0302 	umull	r0, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2064      	movs	r0, #100	; 0x64
 80048a2:	fb00 f303 	mul.w	r3, r0, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	3332      	adds	r3, #50	; 0x32
 80048ac:	4a07      	ldr	r2, [pc, #28]	; (80048cc <UART_SetConfig+0x118>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	440a      	add	r2, r1
 80048be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40013800 	.word	0x40013800
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	2600      	movs	r6, #0
 80048d4:	4d0c      	ldr	r5, [pc, #48]	; (8004908 <__libc_init_array+0x38>)
 80048d6:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	f000 f822 	bl	8004928 <_init>
 80048e4:	2600      	movs	r6, #0
 80048e6:	4d0a      	ldr	r5, [pc, #40]	; (8004910 <__libc_init_array+0x40>)
 80048e8:	4c0a      	ldr	r4, [pc, #40]	; (8004914 <__libc_init_array+0x44>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08004968 	.word	0x08004968
 800490c:	08004968 	.word	0x08004968
 8004910:	08004968 	.word	0x08004968
 8004914:	0800496c 	.word	0x0800496c

08004918 <memset>:
 8004918:	4603      	mov	r3, r0
 800491a:	4402      	add	r2, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
